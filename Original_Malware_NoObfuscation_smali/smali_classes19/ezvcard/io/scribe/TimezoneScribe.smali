.class public Lezvcard/io/scribe/TimezoneScribe;
.super Lezvcard/io/scribe/VCardPropertyScribe;
.source "TimezoneScribe.java"


# annotations
.annotation system Ldalvik/annotation/Signature;
    value = {
        "Lezvcard/io/scribe/VCardPropertyScribe<",
        "Lezvcard/property/Timezone;",
        ">;"
    }
.end annotation


# direct methods
.method public constructor <init>()V
    .locals 2

    .line 100
    const-class v0, Lezvcard/property/Timezone;

    const-string v1, "TZ"

    invoke-direct {p0, v0, v1}, Lezvcard/io/scribe/VCardPropertyScribe;-><init>(Ljava/lang/Class;Ljava/lang/String;)V

    .line 101
    return-void
.end method

.method private offsetFromTimezone(Ljava/util/TimeZone;)Lezvcard/util/UtcOffset;
    .locals 3
    .param p1, "timezone"    # Ljava/util/TimeZone;

    .line 284
    invoke-static {}, Ljava/lang/System;->currentTimeMillis()J

    move-result-wide v0

    invoke-virtual {p1, v0, v1}, Ljava/util/TimeZone;->getOffset(J)I

    move-result v0

    int-to-long v0, v0

    .line 285
    .local v0, "offsetMs":J
    new-instance v2, Lezvcard/util/UtcOffset;

    invoke-direct {v2, v0, v1}, Lezvcard/util/UtcOffset;-><init>(J)V

    return-object v2
.end method

.method private parse(Ljava/lang/String;Lezvcard/VCardDataType;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;
    .locals 4
    .param p1, "value"    # Ljava/lang/String;
    .param p2, "dataType"    # Lezvcard/VCardDataType;
    .param p3, "context"    # Lezvcard/io/ParseContext;

    .line 256
    const/4 v0, 0x0

    if-eqz p1, :cond_2

    invoke-virtual {p1}, Ljava/lang/String;->length()I

    move-result v1

    if-nez v1, :cond_0

    goto :goto_0

    .line 260
    :cond_0
    sget-object v1, Lezvcard/io/scribe/TimezoneScribe$1;->$SwitchMap$ezvcard$VCardVersion:[I

    invoke-virtual {p3}, Lezvcard/io/ParseContext;->getVersion()Lezvcard/VCardVersion;

    move-result-object v2

    invoke-virtual {v2}, Lezvcard/VCardVersion;->ordinal()I

    move-result v2

    aget v1, v1, v2

    const/4 v2, 0x0

    packed-switch v1, :pswitch_data_0

    .line 280
    new-instance v1, Lezvcard/property/Timezone;

    move-object v2, v0

    check-cast v2, Ljava/lang/String;

    invoke-direct {v1, v0}, Lezvcard/property/Timezone;-><init>(Ljava/lang/String;)V

    return-object v1

    .line 271
    :pswitch_0
    :try_start_0
    new-instance v0, Lezvcard/property/Timezone;

    invoke-static {p1}, Lezvcard/util/UtcOffset;->parse(Ljava/lang/String;)Lezvcard/util/UtcOffset;

    move-result-object v1

    invoke-direct {v0, v1}, Lezvcard/property/Timezone;-><init>(Lezvcard/util/UtcOffset;)V
    :try_end_0
    .catch Ljava/lang/IllegalArgumentException; {:try_start_0 .. :try_end_0} :catch_0

    return-object v0

    .line 272
    :catch_0
    move-exception v0

    .line 273
    .local v0, "e":Ljava/lang/IllegalArgumentException;
    sget-object v1, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    if-ne p2, v1, :cond_1

    .line 274
    const/16 v1, 0x14

    new-array v2, v2, [Ljava/lang/Object;

    invoke-virtual {p3, v1, v2}, Lezvcard/io/ParseContext;->addWarning(I[Ljava/lang/Object;)V

    .line 276
    :cond_1
    new-instance v1, Lezvcard/property/Timezone;

    invoke-direct {v1, p1}, Lezvcard/property/Timezone;-><init>(Ljava/lang/String;)V

    return-object v1

    .line 264
    .end local v0    # "e":Ljava/lang/IllegalArgumentException;
    :pswitch_1
    :try_start_1
    new-instance v0, Lezvcard/property/Timezone;

    invoke-static {p1}, Lezvcard/util/UtcOffset;->parse(Ljava/lang/String;)Lezvcard/util/UtcOffset;

    move-result-object v1

    invoke-direct {v0, v1}, Lezvcard/property/Timezone;-><init>(Lezvcard/util/UtcOffset;)V
    :try_end_1
    .catch Ljava/lang/IllegalArgumentException; {:try_start_1 .. :try_end_1} :catch_1

    return-object v0

    .line 265
    :catch_1
    move-exception v0

    .line 266
    .restart local v0    # "e":Ljava/lang/IllegalArgumentException;
    new-instance v1, Lezvcard/io/CannotParseException;

    const/16 v3, 0x13

    new-array v2, v2, [Ljava/lang/Object;

    invoke-direct {v1, v3, v2}, Lezvcard/io/CannotParseException;-><init>(I[Ljava/lang/Object;)V

    throw v1

    .line 257
    .end local v0    # "e":Ljava/lang/IllegalArgumentException;
    :cond_2
    :goto_0
    new-instance v1, Lezvcard/property/Timezone;

    move-object v2, v0

    check-cast v2, Ljava/lang/String;

    invoke-direct {v1, v0}, Lezvcard/property/Timezone;-><init>(Ljava/lang/String;)V

    return-object v1

    nop

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_1
        :pswitch_0
        :pswitch_0
    .end packed-switch
.end method

.method private timezoneFromId(Ljava/lang/String;)Ljava/util/TimeZone;
    .locals 3
    .param p1, "id"    # Ljava/lang/String;

    .line 289
    invoke-static {p1}, Ljava/util/TimeZone;->getTimeZone(Ljava/lang/String;)Ljava/util/TimeZone;

    move-result-object v0

    .line 290
    .local v0, "timezone":Ljava/util/TimeZone;
    invoke-virtual {v0}, Ljava/util/TimeZone;->getID()Ljava/lang/String;

    move-result-object v1

    const-string v2, "GMT"

    invoke-virtual {v2, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_0

    const/4 v1, 0x0

    goto :goto_0

    :cond_0
    move-object v1, v0

    :goto_0
    return-object v1
.end method


# virtual methods
.method protected _dataType(Lezvcard/property/Timezone;Lezvcard/VCardVersion;)Lezvcard/VCardDataType;
    .locals 4
    .param p1, "property"    # Lezvcard/property/Timezone;
    .param p2, "version"    # Lezvcard/VCardVersion;

    .line 117
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getText()Ljava/lang/String;

    move-result-object v0

    .line 118
    .local v0, "text":Ljava/lang/String;
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getOffset()Lezvcard/util/UtcOffset;

    move-result-object v1

    .line 120
    .local v1, "offset":Lezvcard/util/UtcOffset;
    sget-object v2, Lezvcard/io/scribe/TimezoneScribe$1;->$SwitchMap$ezvcard$VCardVersion:[I

    invoke-virtual {p2}, Lezvcard/VCardVersion;->ordinal()I

    move-result v3

    aget v2, v2, v3

    packed-switch v2, :pswitch_data_0

    goto :goto_0

    .line 132
    :pswitch_0
    if-eqz v0, :cond_0

    .line 133
    sget-object v2, Lezvcard/VCardDataType;->TEXT:Lezvcard/VCardDataType;

    return-object v2

    .line 135
    :cond_0
    if-eqz v1, :cond_2

    .line 136
    sget-object v2, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    return-object v2

    .line 124
    :pswitch_1
    if-eqz v1, :cond_1

    .line 125
    sget-object v2, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    return-object v2

    .line 127
    :cond_1
    if-eqz v0, :cond_2

    .line 128
    sget-object v2, Lezvcard/VCardDataType;->TEXT:Lezvcard/VCardDataType;

    return-object v2

    .line 122
    :pswitch_2
    sget-object v2, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    return-object v2

    .line 141
    :cond_2
    :goto_0
    invoke-virtual {p0, p2}, Lezvcard/io/scribe/TimezoneScribe;->_defaultDataType(Lezvcard/VCardVersion;)Lezvcard/VCardDataType;

    move-result-object v2

    return-object v2

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_2
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method protected bridge synthetic _dataType(Lezvcard/property/VCardProperty;Lezvcard/VCardVersion;)Lezvcard/VCardDataType;
    .locals 1
    .param p1, "x0"    # Lezvcard/property/VCardProperty;
    .param p2, "x1"    # Lezvcard/VCardVersion;

    .line 98
    move-object v0, p1

    check-cast v0, Lezvcard/property/Timezone;

    invoke-virtual {p0, v0, p2}, Lezvcard/io/scribe/TimezoneScribe;->_dataType(Lezvcard/property/Timezone;Lezvcard/VCardVersion;)Lezvcard/VCardDataType;

    move-result-object v0

    return-object v0
.end method

.method protected _defaultDataType(Lezvcard/VCardVersion;)Lezvcard/VCardDataType;
    .locals 2
    .param p1, "version"    # Lezvcard/VCardVersion;

    .line 105
    sget-object v0, Lezvcard/io/scribe/TimezoneScribe$1;->$SwitchMap$ezvcard$VCardVersion:[I

    invoke-virtual {p1}, Lezvcard/VCardVersion;->ordinal()I

    move-result v1

    aget v0, v0, v1

    packed-switch v0, :pswitch_data_0

    .line 112
    const/4 v0, 0x0

    return-object v0

    .line 110
    :pswitch_0
    sget-object v0, Lezvcard/VCardDataType;->TEXT:Lezvcard/VCardDataType;

    return-object v0

    .line 108
    :pswitch_1
    sget-object v0, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    return-object v0

    nop

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_1
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method protected _parseHtml(Lezvcard/io/html/HCardElement;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;
    .locals 2
    .param p1, "element"    # Lezvcard/io/html/HCardElement;
    .param p2, "context"    # Lezvcard/io/ParseContext;

    .line 231
    invoke-virtual {p1}, Lezvcard/io/html/HCardElement;->value()Ljava/lang/String;

    move-result-object v0

    const/4 v1, 0x0

    invoke-direct {p0, v0, v1, p2}, Lezvcard/io/scribe/TimezoneScribe;->parse(Ljava/lang/String;Lezvcard/VCardDataType;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;

    move-result-object v0

    return-object v0
.end method

.method protected bridge synthetic _parseHtml(Lezvcard/io/html/HCardElement;Lezvcard/io/ParseContext;)Lezvcard/property/VCardProperty;
    .locals 1
    .param p1, "x0"    # Lezvcard/io/html/HCardElement;
    .param p2, "x1"    # Lezvcard/io/ParseContext;

    .line 98
    invoke-virtual {p0, p1, p2}, Lezvcard/io/scribe/TimezoneScribe;->_parseHtml(Lezvcard/io/html/HCardElement;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;

    move-result-object v0

    return-object v0
.end method

.method protected _parseJson(Lezvcard/io/json/JCardValue;Lezvcard/VCardDataType;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;
    .locals 2
    .param p1, "value"    # Lezvcard/io/json/JCardValue;
    .param p2, "dataType"    # Lezvcard/VCardDataType;
    .param p3, "parameters"    # Lezvcard/parameter/VCardParameters;
    .param p4, "context"    # Lezvcard/io/ParseContext;

    .line 251
    invoke-virtual {p1}, Lezvcard/io/json/JCardValue;->asSingle()Ljava/lang/String;

    move-result-object v0

    .line 252
    .local v0, "valueStr":Ljava/lang/String;
    invoke-direct {p0, v0, p2, p4}, Lezvcard/io/scribe/TimezoneScribe;->parse(Ljava/lang/String;Lezvcard/VCardDataType;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;

    move-result-object v1

    return-object v1
.end method

.method protected bridge synthetic _parseJson(Lezvcard/io/json/JCardValue;Lezvcard/VCardDataType;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/VCardProperty;
    .locals 1
    .param p1, "x0"    # Lezvcard/io/json/JCardValue;
    .param p2, "x1"    # Lezvcard/VCardDataType;
    .param p3, "x2"    # Lezvcard/parameter/VCardParameters;
    .param p4, "x3"    # Lezvcard/io/ParseContext;

    .line 98
    invoke-virtual {p0, p1, p2, p3, p4}, Lezvcard/io/scribe/TimezoneScribe;->_parseJson(Lezvcard/io/json/JCardValue;Lezvcard/VCardDataType;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;

    move-result-object v0

    return-object v0
.end method

.method protected _parseText(Ljava/lang/String;Lezvcard/VCardDataType;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;
    .locals 1
    .param p1, "value"    # Ljava/lang/String;
    .param p2, "dataType"    # Lezvcard/VCardDataType;
    .param p3, "parameters"    # Lezvcard/parameter/VCardParameters;
    .param p4, "context"    # Lezvcard/io/ParseContext;

    .line 189
    invoke-static {p1}, Lcom/github/mangstadt/vinnie/io/VObjectPropertyValues;->unescape(Ljava/lang/String;)Ljava/lang/String;

    move-result-object p1

    .line 190
    invoke-direct {p0, p1, p2, p4}, Lezvcard/io/scribe/TimezoneScribe;->parse(Ljava/lang/String;Lezvcard/VCardDataType;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;

    move-result-object v0

    return-object v0
.end method

.method protected bridge synthetic _parseText(Ljava/lang/String;Lezvcard/VCardDataType;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/VCardProperty;
    .locals 1
    .param p1, "x0"    # Ljava/lang/String;
    .param p2, "x1"    # Lezvcard/VCardDataType;
    .param p3, "x2"    # Lezvcard/parameter/VCardParameters;
    .param p4, "x3"    # Lezvcard/io/ParseContext;

    .line 98
    invoke-virtual {p0, p1, p2, p3, p4}, Lezvcard/io/scribe/TimezoneScribe;->_parseText(Ljava/lang/String;Lezvcard/VCardDataType;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;

    move-result-object v0

    return-object v0
.end method

.method protected _parseXml(Lezvcard/io/xml/XCardElement;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;
    .locals 6
    .param p1, "element"    # Lezvcard/io/xml/XCardElement;
    .param p2, "parameters"    # Lezvcard/parameter/VCardParameters;
    .param p3, "context"    # Lezvcard/io/ParseContext;

    .line 212
    const/4 v0, 0x1

    new-array v1, v0, [Lezvcard/VCardDataType;

    sget-object v2, Lezvcard/VCardDataType;->TEXT:Lezvcard/VCardDataType;

    const/4 v3, 0x0

    aput-object v2, v1, v3

    invoke-virtual {p1, v1}, Lezvcard/io/xml/XCardElement;->first([Lezvcard/VCardDataType;)Ljava/lang/String;

    move-result-object v1

    .line 213
    .local v1, "text":Ljava/lang/String;
    if-eqz v1, :cond_0

    .line 214
    new-instance v0, Lezvcard/property/Timezone;

    invoke-direct {v0, v1}, Lezvcard/property/Timezone;-><init>(Ljava/lang/String;)V

    return-object v0

    .line 217
    :cond_0
    new-array v2, v0, [Lezvcard/VCardDataType;

    sget-object v4, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    aput-object v4, v2, v3

    invoke-virtual {p1, v2}, Lezvcard/io/xml/XCardElement;->first([Lezvcard/VCardDataType;)Ljava/lang/String;

    move-result-object v2

    .line 218
    .local v2, "utcOffset":Ljava/lang/String;
    if-eqz v2, :cond_1

    .line 220
    :try_start_0
    new-instance v0, Lezvcard/property/Timezone;

    invoke-static {v2}, Lezvcard/util/UtcOffset;->parse(Ljava/lang/String;)Lezvcard/util/UtcOffset;

    move-result-object v4

    invoke-direct {v0, v4}, Lezvcard/property/Timezone;-><init>(Lezvcard/util/UtcOffset;)V
    :try_end_0
    .catch Ljava/lang/IllegalArgumentException; {:try_start_0 .. :try_end_0} :catch_0

    return-object v0

    .line 221
    :catch_0
    move-exception v0

    .line 222
    .local v0, "e":Ljava/lang/IllegalArgumentException;
    new-instance v4, Lezvcard/io/CannotParseException;

    const/16 v5, 0x13

    new-array v3, v3, [Ljava/lang/Object;

    invoke-direct {v4, v5, v3}, Lezvcard/io/CannotParseException;-><init>(I[Ljava/lang/Object;)V

    throw v4

    .line 226
    .end local v0    # "e":Ljava/lang/IllegalArgumentException;
    :cond_1
    const/4 v4, 0x2

    new-array v4, v4, [Lezvcard/VCardDataType;

    sget-object v5, Lezvcard/VCardDataType;->TEXT:Lezvcard/VCardDataType;

    aput-object v5, v4, v3

    sget-object v3, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    aput-object v3, v4, v0

    invoke-static {v4}, Lezvcard/io/scribe/TimezoneScribe;->missingXmlElements([Lezvcard/VCardDataType;)Lezvcard/io/CannotParseException;

    move-result-object v0

    throw v0
.end method

.method protected bridge synthetic _parseXml(Lezvcard/io/xml/XCardElement;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/VCardProperty;
    .locals 1
    .param p1, "x0"    # Lezvcard/io/xml/XCardElement;
    .param p2, "x1"    # Lezvcard/parameter/VCardParameters;
    .param p3, "x2"    # Lezvcard/io/ParseContext;

    .line 98
    invoke-virtual {p0, p1, p2, p3}, Lezvcard/io/scribe/TimezoneScribe;->_parseXml(Lezvcard/io/xml/XCardElement;Lezvcard/parameter/VCardParameters;Lezvcard/io/ParseContext;)Lezvcard/property/Timezone;

    move-result-object v0

    return-object v0
.end method

.method protected _writeJson(Lezvcard/property/Timezone;)Lezvcard/io/json/JCardValue;
    .locals 3
    .param p1, "property"    # Lezvcard/property/Timezone;

    .line 236
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getText()Ljava/lang/String;

    move-result-object v0

    .line 237
    .local v0, "text":Ljava/lang/String;
    if-eqz v0, :cond_0

    .line 238
    invoke-static {v0}, Lezvcard/io/json/JCardValue;->single(Ljava/lang/Object;)Lezvcard/io/json/JCardValue;

    move-result-object v1

    return-object v1

    .line 241
    :cond_0
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getOffset()Lezvcard/util/UtcOffset;

    move-result-object v1

    .line 242
    .local v1, "offset":Lezvcard/util/UtcOffset;
    if-eqz v1, :cond_1

    .line 243
    const/4 v2, 0x1

    invoke-virtual {v1, v2}, Lezvcard/util/UtcOffset;->toString(Z)Ljava/lang/String;

    move-result-object v2

    invoke-static {v2}, Lezvcard/io/json/JCardValue;->single(Ljava/lang/Object;)Lezvcard/io/json/JCardValue;

    move-result-object v2

    return-object v2

    .line 246
    :cond_1
    const-string v2, ""

    invoke-static {v2}, Lezvcard/io/json/JCardValue;->single(Ljava/lang/Object;)Lezvcard/io/json/JCardValue;

    move-result-object v2

    return-object v2
.end method

.method protected bridge synthetic _writeJson(Lezvcard/property/VCardProperty;)Lezvcard/io/json/JCardValue;
    .locals 1
    .param p1, "x0"    # Lezvcard/property/VCardProperty;

    .line 98
    move-object v0, p1

    check-cast v0, Lezvcard/property/Timezone;

    invoke-virtual {p0, v0}, Lezvcard/io/scribe/TimezoneScribe;->_writeJson(Lezvcard/property/Timezone;)Lezvcard/io/json/JCardValue;

    move-result-object v0

    return-object v0
.end method

.method protected _writeText(Lezvcard/property/Timezone;Lezvcard/io/text/WriteContext;)Ljava/lang/String;
    .locals 5
    .param p1, "property"    # Lezvcard/property/Timezone;
    .param p2, "context"    # Lezvcard/io/text/WriteContext;

    .line 146
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getText()Ljava/lang/String;

    move-result-object v0

    .line 147
    .local v0, "text":Ljava/lang/String;
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getOffset()Lezvcard/util/UtcOffset;

    move-result-object v1

    .line 149
    .local v1, "offset":Lezvcard/util/UtcOffset;
    sget-object v2, Lezvcard/io/scribe/TimezoneScribe$1;->$SwitchMap$ezvcard$VCardVersion:[I

    invoke-virtual {p2}, Lezvcard/io/text/WriteContext;->getVersion()Lezvcard/VCardVersion;

    move-result-object v3

    invoke-virtual {v3}, Lezvcard/VCardVersion;->ordinal()I

    move-result v3

    aget v2, v2, v3

    const/4 v3, 0x0

    packed-switch v2, :pswitch_data_0

    goto :goto_0

    .line 174
    :pswitch_0
    if-eqz v0, :cond_0

    .line 175
    invoke-static {v0}, Lcom/github/mangstadt/vinnie/io/VObjectPropertyValues;->escape(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v2

    return-object v2

    .line 178
    :cond_0
    if-eqz v1, :cond_3

    .line 179
    invoke-virtual {v1, v3}, Lezvcard/util/UtcOffset;->toString(Z)Ljava/lang/String;

    move-result-object v2

    return-object v2

    .line 165
    :pswitch_1
    if-eqz v1, :cond_1

    .line 166
    const/4 v2, 0x1

    invoke-virtual {v1, v2}, Lezvcard/util/UtcOffset;->toString(Z)Ljava/lang/String;

    move-result-object v2

    return-object v2

    .line 169
    :cond_1
    if-eqz v0, :cond_3

    .line 170
    invoke-static {v0}, Lcom/github/mangstadt/vinnie/io/VObjectPropertyValues;->escape(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v2

    return-object v2

    .line 151
    :pswitch_2
    if-eqz v1, :cond_2

    .line 152
    invoke-virtual {v1, v3}, Lezvcard/util/UtcOffset;->toString(Z)Ljava/lang/String;

    move-result-object v2

    return-object v2

    .line 155
    :cond_2
    if-eqz v0, :cond_3

    .line 157
    invoke-direct {p0, v0}, Lezvcard/io/scribe/TimezoneScribe;->timezoneFromId(Ljava/lang/String;)Ljava/util/TimeZone;

    move-result-object v2

    .line 158
    .local v2, "timezone":Ljava/util/TimeZone;
    if-eqz v2, :cond_3

    .line 159
    invoke-direct {p0, v2}, Lezvcard/io/scribe/TimezoneScribe;->offsetFromTimezone(Ljava/util/TimeZone;)Lezvcard/util/UtcOffset;

    move-result-object v4

    .line 160
    .local v4, "tzOffset":Lezvcard/util/UtcOffset;
    invoke-virtual {v4, v3}, Lezvcard/util/UtcOffset;->toString(Z)Ljava/lang/String;

    move-result-object v3

    return-object v3

    .line 184
    .end local v2    # "timezone":Ljava/util/TimeZone;
    .end local v4    # "tzOffset":Lezvcard/util/UtcOffset;
    :cond_3
    :goto_0
    const-string v2, ""

    return-object v2

    nop

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_2
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method protected bridge synthetic _writeText(Lezvcard/property/VCardProperty;Lezvcard/io/text/WriteContext;)Ljava/lang/String;
    .locals 1
    .param p1, "x0"    # Lezvcard/property/VCardProperty;
    .param p2, "x1"    # Lezvcard/io/text/WriteContext;

    .line 98
    move-object v0, p1

    check-cast v0, Lezvcard/property/Timezone;

    invoke-virtual {p0, v0, p2}, Lezvcard/io/scribe/TimezoneScribe;->_writeText(Lezvcard/property/Timezone;Lezvcard/io/text/WriteContext;)Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method protected _writeXml(Lezvcard/property/Timezone;Lezvcard/io/xml/XCardElement;)V
    .locals 4
    .param p1, "property"    # Lezvcard/property/Timezone;
    .param p2, "parent"    # Lezvcard/io/xml/XCardElement;

    .line 195
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getText()Ljava/lang/String;

    move-result-object v0

    .line 196
    .local v0, "text":Ljava/lang/String;
    if-eqz v0, :cond_0

    .line 197
    sget-object v1, Lezvcard/VCardDataType;->TEXT:Lezvcard/VCardDataType;

    invoke-virtual {p2, v1, v0}, Lezvcard/io/xml/XCardElement;->append(Lezvcard/VCardDataType;Ljava/lang/String;)Lorg/w3c/dom/Element;

    .line 198
    return-void

    .line 201
    :cond_0
    invoke-virtual {p1}, Lezvcard/property/Timezone;->getOffset()Lezvcard/util/UtcOffset;

    move-result-object v1

    .line 202
    .local v1, "offset":Lezvcard/util/UtcOffset;
    if-eqz v1, :cond_1

    .line 203
    sget-object v2, Lezvcard/VCardDataType;->UTC_OFFSET:Lezvcard/VCardDataType;

    const/4 v3, 0x0

    invoke-virtual {v1, v3}, Lezvcard/util/UtcOffset;->toString(Z)Ljava/lang/String;

    move-result-object v3

    invoke-virtual {p2, v2, v3}, Lezvcard/io/xml/XCardElement;->append(Lezvcard/VCardDataType;Ljava/lang/String;)Lorg/w3c/dom/Element;

    .line 204
    return-void

    .line 207
    :cond_1
    sget-object v2, Lezvcard/VCardDataType;->TEXT:Lezvcard/VCardDataType;

    const-string v3, ""

    invoke-virtual {p2, v2, v3}, Lezvcard/io/xml/XCardElement;->append(Lezvcard/VCardDataType;Ljava/lang/String;)Lorg/w3c/dom/Element;

    .line 208
    return-void
.end method

.method protected bridge synthetic _writeXml(Lezvcard/property/VCardProperty;Lezvcard/io/xml/XCardElement;)V
    .locals 1
    .param p1, "x0"    # Lezvcard/property/VCardProperty;
    .param p2, "x1"    # Lezvcard/io/xml/XCardElement;

    .line 98
    move-object v0, p1

    check-cast v0, Lezvcard/property/Timezone;

    invoke-virtual {p0, v0, p2}, Lezvcard/io/scribe/TimezoneScribe;->_writeXml(Lezvcard/property/Timezone;Lezvcard/io/xml/XCardElement;)V

    return-void
.end method
