.class public Lcom/virgilsecurity/pythia/Pythia;
.super Ljava/lang/Object;
.source "Pythia.java"


# instance fields
.field private accessTokenProvider:Lcom/virgilsecurity/sdk/jwt/contract/AccessTokenProvider;

.field private proofKeys:Lcom/virgilsecurity/pythia/ProofKeys;

.field private pythiaClient:Lcom/virgilsecurity/pythia/client/PythiaClient;

.field private pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;


# direct methods
.method public constructor <init>(Lcom/virgilsecurity/pythia/PythiaContext;)V
    .locals 2
    .param p1, "context"    # Lcom/virgilsecurity/pythia/PythiaContext;

    .line 71
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    .line 72
    if-eqz p1, :cond_0

    .line 75
    invoke-virtual {p1}, Lcom/virgilsecurity/pythia/PythiaContext;->getProofKeys()Lcom/virgilsecurity/pythia/ProofKeys;

    move-result-object v0

    iput-object v0, p0, Lcom/virgilsecurity/pythia/Pythia;->proofKeys:Lcom/virgilsecurity/pythia/ProofKeys;

    .line 76
    invoke-virtual {p1}, Lcom/virgilsecurity/pythia/PythiaContext;->getPythiaCrypto()Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    move-result-object v0

    iput-object v0, p0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    .line 77
    invoke-virtual {p1}, Lcom/virgilsecurity/pythia/PythiaContext;->getPythiaClient()Lcom/virgilsecurity/pythia/client/PythiaClient;

    move-result-object v0

    iput-object v0, p0, Lcom/virgilsecurity/pythia/Pythia;->pythiaClient:Lcom/virgilsecurity/pythia/client/PythiaClient;

    .line 78
    invoke-virtual {p1}, Lcom/virgilsecurity/pythia/PythiaContext;->getAccessTokenProvider()Lcom/virgilsecurity/sdk/jwt/contract/AccessTokenProvider;

    move-result-object v0

    iput-object v0, p0, Lcom/virgilsecurity/pythia/Pythia;->accessTokenProvider:Lcom/virgilsecurity/sdk/jwt/contract/AccessTokenProvider;

    .line 79
    return-void

    .line 73
    :cond_0
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string v1, "Context should be set"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0
.end method


# virtual methods
.method public createBreachProofPassword(Ljava/lang/String;)Lcom/virgilsecurity/pythia/model/BreachProofPassword;
    .locals 17
    .param p1, "password"    # Ljava/lang/String;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lcom/virgilsecurity/sdk/crypto/exceptions/CryptoException;,
            Lcom/virgilsecurity/pythia/model/exception/VirgilPythiaServiceException;,
            Lcom/virgilsecurity/pythia/model/exception/TransformVerificationException;
        }
    .end annotation

    .line 143
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    invoke-interface {v1}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->generateSalt()[B

    move-result-object v1

    .line 145
    .local v1, "salt":[B
    iget-object v2, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    move-object/from16 v9, p1

    invoke-interface {v2, v9}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->blind(Ljava/lang/String;)Lcom/virgilsecurity/pythia/crypto/BlindResult;

    move-result-object v10

    .line 146
    .local v10, "blinded":Lcom/virgilsecurity/pythia/crypto/BlindResult;
    invoke-virtual {v10}, Lcom/virgilsecurity/pythia/crypto/BlindResult;->getBlindedPassword()[B

    move-result-object v11

    .line 147
    .local v11, "blindedPassword":[B
    invoke-virtual {v10}, Lcom/virgilsecurity/pythia/crypto/BlindResult;->getBlindingSecret()[B

    move-result-object v12

    .line 149
    .local v12, "blindingSecret":[B
    iget-object v2, v0, Lcom/virgilsecurity/pythia/Pythia;->proofKeys:Lcom/virgilsecurity/pythia/ProofKeys;

    invoke-virtual {v2}, Lcom/virgilsecurity/pythia/ProofKeys;->getCurrentKey()Lcom/virgilsecurity/pythia/ProofKey;

    move-result-object v13

    .line 151
    .local v13, "currentProofKey":Lcom/virgilsecurity/pythia/ProofKey;
    new-instance v2, Lcom/virgilsecurity/sdk/jwt/TokenContext;

    const-string v3, "pythia-java"

    const-string v4, "pythia"

    const-string/jumbo v5, "transform"

    const/4 v6, 0x0

    invoke-direct {v2, v3, v4, v5, v6}, Lcom/virgilsecurity/sdk/jwt/TokenContext;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V

    move-object v14, v2

    .line 152
    .local v14, "tokenContext":Lcom/virgilsecurity/sdk/jwt/TokenContext;
    iget-object v2, v0, Lcom/virgilsecurity/pythia/Pythia;->accessTokenProvider:Lcom/virgilsecurity/sdk/jwt/contract/AccessTokenProvider;

    invoke-interface {v2, v14}, Lcom/virgilsecurity/sdk/jwt/contract/AccessTokenProvider;->getToken(Lcom/virgilsecurity/sdk/jwt/TokenContext;)Lcom/virgilsecurity/sdk/jwt/contract/AccessToken;

    move-result-object v15

    .line 153
    .local v15, "accessToken":Lcom/virgilsecurity/sdk/jwt/contract/AccessToken;
    iget-object v2, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaClient:Lcom/virgilsecurity/pythia/client/PythiaClient;

    .line 154
    invoke-virtual {v13}, Lcom/virgilsecurity/pythia/ProofKey;->getVersion()I

    move-result v3

    invoke-static {v3}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v5

    invoke-interface {v15}, Lcom/virgilsecurity/sdk/jwt/contract/AccessToken;->stringRepresentation()Ljava/lang/String;

    move-result-object v7

    .line 153
    const/4 v6, 0x1

    move-object v3, v1

    move-object v4, v11

    invoke-interface/range {v2 .. v7}, Lcom/virgilsecurity/pythia/client/PythiaClient;->transformPassword([B[BLjava/lang/Integer;ZLjava/lang/String;)Lcom/virgilsecurity/pythia/model/TransformResponse;

    move-result-object v16

    .line 156
    .local v16, "transformResponse":Lcom/virgilsecurity/pythia/model/TransformResponse;
    iget-object v2, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    invoke-virtual/range {v16 .. v16}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getTransformedPassword()[B

    move-result-object v3

    .line 157
    invoke-virtual {v13}, Lcom/virgilsecurity/pythia/ProofKey;->getData()[B

    move-result-object v6

    invoke-virtual/range {v16 .. v16}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getProof()Lcom/virgilsecurity/pythia/model/Proof;

    move-result-object v4

    invoke-virtual {v4}, Lcom/virgilsecurity/pythia/model/Proof;->getC()[B

    move-result-object v7

    .line 158
    invoke-virtual/range {v16 .. v16}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getProof()Lcom/virgilsecurity/pythia/model/Proof;

    move-result-object v4

    invoke-virtual {v4}, Lcom/virgilsecurity/pythia/model/Proof;->getU()[B

    move-result-object v8

    .line 156
    move-object v4, v11

    move-object v5, v1

    invoke-interface/range {v2 .. v8}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->verify([B[B[B[B[B[B)Z

    move-result v2

    .line 160
    .local v2, "isTransformVerified":Z
    if-eqz v2, :cond_0

    .line 164
    iget-object v3, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    invoke-virtual/range {v16 .. v16}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getTransformedPassword()[B

    move-result-object v4

    invoke-interface {v3, v4, v12}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->deblind([B[B)[B

    move-result-object v3

    .line 167
    .local v3, "deblindedPassword":[B
    new-instance v4, Lcom/virgilsecurity/pythia/model/BreachProofPassword;

    invoke-virtual {v13}, Lcom/virgilsecurity/pythia/ProofKey;->getVersion()I

    move-result v5

    invoke-direct {v4, v1, v3, v5}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;-><init>([B[BI)V

    return-object v4

    .line 161
    .end local v3    # "deblindedPassword":[B
    :cond_0
    new-instance v3, Lcom/virgilsecurity/pythia/model/exception/TransformVerificationException;

    invoke-direct {v3}, Lcom/virgilsecurity/pythia/model/exception/TransformVerificationException;-><init>()V

    throw v3
.end method

.method public updateBreachProofPassword(Ljava/lang/String;Lcom/virgilsecurity/pythia/model/BreachProofPassword;)Lcom/virgilsecurity/pythia/model/BreachProofPassword;
    .locals 7
    .param p1, "updateToken"    # Ljava/lang/String;
    .param p2, "breachProofPassword"    # Lcom/virgilsecurity/pythia/model/BreachProofPassword;

    .line 93
    invoke-static {p1}, Lcom/virgilsecurity/sdk/utils/StringUtils;->isBlank(Ljava/lang/CharSequence;)Z

    move-result v0

    if-nez v0, :cond_4

    .line 96
    if-eqz p2, :cond_3

    .line 99
    const-string v0, "\\."

    invoke-virtual {p1, v0}, Ljava/lang/String;->split(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object v0

    .line 100
    .local v0, "parts":[Ljava/lang/String;
    array-length v1, v0

    const/4 v2, 0x4

    const-string v3, "Update token has invalid format"

    if-ne v1, v2, :cond_2

    const/4 v1, 0x0

    aget-object v1, v0, v1

    const-string v2, "UT"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_2

    .line 107
    const/4 v1, 0x1

    :try_start_0
    aget-object v1, v0, v1

    invoke-static {v1}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I

    move-result v1

    .line 108
    .local v1, "prevVersion":I
    const/4 v2, 0x2

    aget-object v2, v0, v2

    invoke-static {v2}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I

    move-result v2

    .line 109
    .local v2, "nextVersion":I
    const/4 v4, 0x3

    aget-object v4, v0, v4

    invoke-virtual {v4}, Ljava/lang/String;->getBytes()[B

    move-result-object v4

    invoke-static {v4}, Lcom/virgilsecurity/crypto/foundation/Base64;->decode([B)[B

    move-result-object v3
    :try_end_0
    .catch Ljava/lang/NumberFormatException; {:try_start_0 .. :try_end_0} :catch_0

    .line 112
    .local v3, "updateTokenData":[B
    nop

    .line 114
    invoke-virtual {p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getVersion()I

    move-result v4

    if-eq v2, v4, :cond_1

    .line 117
    invoke-virtual {p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getVersion()I

    move-result v4

    if-ne v1, v4, :cond_0

    .line 121
    iget-object v4, p0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    .line 122
    invoke-virtual {p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getDeblindedPassword()[B

    move-result-object v5

    invoke-interface {v4, v5, v3}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->updateDeblinded([B[B)[B

    move-result-object v4

    .line 124
    .local v4, "newDeblindedPassword":[B
    new-instance v5, Lcom/virgilsecurity/pythia/model/BreachProofPassword;

    invoke-virtual {p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getSalt()[B

    move-result-object v6

    invoke-direct {v5, v6, v4, v2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;-><init>([B[BI)V

    return-object v5

    .line 118
    .end local v4    # "newDeblindedPassword":[B
    :cond_0
    new-instance v4, Ljava/lang/IllegalArgumentException;

    const-string v5, "Wrong user version"

    invoke-direct {v4, v5}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v4

    .line 115
    :cond_1
    new-instance v4, Ljava/lang/IllegalArgumentException;

    const-string v5, "Already migrated"

    invoke-direct {v4, v5}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v4

    .line 110
    .end local v1    # "prevVersion":I
    .end local v2    # "nextVersion":I
    .end local v3    # "updateTokenData":[B
    :catch_0
    move-exception v1

    .line 111
    .local v1, "e":Ljava/lang/NumberFormatException;
    new-instance v2, Ljava/lang/IllegalArgumentException;

    invoke-direct {v2, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 101
    .end local v1    # "e":Ljava/lang/NumberFormatException;
    :cond_2
    new-instance v1, Ljava/lang/IllegalArgumentException;

    invoke-direct {v1, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 97
    .end local v0    # "parts":[Ljava/lang/String;
    :cond_3
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string v1, "Breach proof password should be set"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 94
    :cond_4
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string v1, "Update token should not be empty"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0
.end method

.method public verifyBreachProofPassword(Ljava/lang/String;Lcom/virgilsecurity/pythia/model/BreachProofPassword;Z)Z
    .locals 16
    .param p1, "password"    # Ljava/lang/String;
    .param p2, "breachProofPassword"    # Lcom/virgilsecurity/pythia/model/BreachProofPassword;
    .param p3, "prove"    # Z
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lcom/virgilsecurity/sdk/crypto/exceptions/CryptoException;,
            Lcom/virgilsecurity/pythia/model/exception/TransformVerificationException;,
            Lcom/virgilsecurity/pythia/model/exception/VirgilPythiaServiceException;
        }
    .end annotation

    .line 190
    move-object/from16 v0, p0

    new-instance v1, Lcom/virgilsecurity/sdk/jwt/TokenContext;

    const-string v2, "pythia-java"

    const-string v3, "pythia"

    const-string/jumbo v4, "transform"

    const/4 v5, 0x0

    invoke-direct {v1, v2, v3, v4, v5}, Lcom/virgilsecurity/sdk/jwt/TokenContext;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V

    .line 191
    .local v1, "tokenContext":Lcom/virgilsecurity/sdk/jwt/TokenContext;
    iget-object v2, v0, Lcom/virgilsecurity/pythia/Pythia;->accessTokenProvider:Lcom/virgilsecurity/sdk/jwt/contract/AccessTokenProvider;

    invoke-interface {v2, v1}, Lcom/virgilsecurity/sdk/jwt/contract/AccessTokenProvider;->getToken(Lcom/virgilsecurity/sdk/jwt/TokenContext;)Lcom/virgilsecurity/sdk/jwt/contract/AccessToken;

    move-result-object v2

    .line 192
    .local v2, "accessToken":Lcom/virgilsecurity/sdk/jwt/contract/AccessToken;
    iget-object v3, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    move-object/from16 v4, p1

    invoke-interface {v3, v4}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->blind(Ljava/lang/String;)Lcom/virgilsecurity/pythia/crypto/BlindResult;

    move-result-object v3

    .line 193
    .local v3, "blinded":Lcom/virgilsecurity/pythia/crypto/BlindResult;
    invoke-virtual {v3}, Lcom/virgilsecurity/pythia/crypto/BlindResult;->getBlindedPassword()[B

    move-result-object v12

    .line 194
    .local v12, "blindedPassword":[B
    invoke-virtual {v3}, Lcom/virgilsecurity/pythia/crypto/BlindResult;->getBlindingSecret()[B

    move-result-object v13

    .line 195
    .local v13, "blindingSecret":[B
    iget-object v5, v0, Lcom/virgilsecurity/pythia/Pythia;->proofKeys:Lcom/virgilsecurity/pythia/ProofKeys;

    invoke-virtual/range {p2 .. p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getVersion()I

    move-result v6

    invoke-virtual {v5, v6}, Lcom/virgilsecurity/pythia/ProofKeys;->getProofKey(I)Lcom/virgilsecurity/pythia/ProofKey;

    move-result-object v14

    .line 197
    .local v14, "actualProofKey":Lcom/virgilsecurity/pythia/ProofKey;
    iget-object v5, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaClient:Lcom/virgilsecurity/pythia/client/PythiaClient;

    .line 198
    invoke-virtual/range {p2 .. p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getSalt()[B

    move-result-object v6

    invoke-virtual/range {p2 .. p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getVersion()I

    move-result v7

    invoke-static {v7}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v8

    .line 199
    invoke-interface {v2}, Lcom/virgilsecurity/sdk/jwt/contract/AccessToken;->stringRepresentation()Ljava/lang/String;

    move-result-object v10

    .line 197
    move-object v7, v12

    move/from16 v9, p3

    invoke-interface/range {v5 .. v10}, Lcom/virgilsecurity/pythia/client/PythiaClient;->transformPassword([B[BLjava/lang/Integer;ZLjava/lang/String;)Lcom/virgilsecurity/pythia/model/TransformResponse;

    move-result-object v15

    .line 201
    .local v15, "transformResponse":Lcom/virgilsecurity/pythia/model/TransformResponse;
    if-eqz p3, :cond_1

    .line 202
    iget-object v5, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    invoke-virtual {v15}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getTransformedPassword()[B

    move-result-object v6

    .line 203
    invoke-virtual/range {p2 .. p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getSalt()[B

    move-result-object v8

    invoke-virtual {v14}, Lcom/virgilsecurity/pythia/ProofKey;->getData()[B

    move-result-object v9

    .line 204
    invoke-virtual {v15}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getProof()Lcom/virgilsecurity/pythia/model/Proof;

    move-result-object v7

    invoke-virtual {v7}, Lcom/virgilsecurity/pythia/model/Proof;->getC()[B

    move-result-object v10

    invoke-virtual {v15}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getProof()Lcom/virgilsecurity/pythia/model/Proof;

    move-result-object v7

    invoke-virtual {v7}, Lcom/virgilsecurity/pythia/model/Proof;->getU()[B

    move-result-object v11

    .line 202
    move-object v7, v12

    invoke-interface/range {v5 .. v11}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->verify([B[B[B[B[B[B)Z

    move-result v5

    .line 205
    .local v5, "isTransformVerified":Z
    if-eqz v5, :cond_0

    goto :goto_0

    .line 206
    :cond_0
    new-instance v6, Lcom/virgilsecurity/pythia/model/exception/TransformVerificationException;

    invoke-direct {v6}, Lcom/virgilsecurity/pythia/model/exception/TransformVerificationException;-><init>()V

    throw v6

    .line 210
    .end local v5    # "isTransformVerified":Z
    :cond_1
    :goto_0
    iget-object v5, v0, Lcom/virgilsecurity/pythia/Pythia;->pythiaCrypto:Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;

    invoke-virtual {v15}, Lcom/virgilsecurity/pythia/model/TransformResponse;->getTransformedPassword()[B

    move-result-object v6

    invoke-interface {v5, v6, v13}, Lcom/virgilsecurity/pythia/crypto/PythiaCrypto;->deblind([B[B)[B

    move-result-object v5

    .line 213
    .local v5, "deblindedPassword":[B
    invoke-virtual/range {p2 .. p2}, Lcom/virgilsecurity/pythia/model/BreachProofPassword;->getDeblindedPassword()[B

    move-result-object v6

    invoke-static {v5, v6}, Ljava/util/Arrays;->equals([B[B)Z

    move-result v6

    return v6
.end method
