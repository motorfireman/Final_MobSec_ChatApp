.class Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;
.super Ljava/lang/Object;
.source "DefaultIteratorAdapter.java"

# interfaces
.implements Lfreemarker/template/TemplateModelIterator;


# annotations
.annotation system Ldalvik/annotation/EnclosingClass;
    value = Lfreemarker/template/DefaultIteratorAdapter;
.end annotation

.annotation system Ldalvik/annotation/InnerClass;
    accessFlags = 0x2
    name = "SimpleTemplateModelIterator"
.end annotation


# instance fields
.field private iteratorOwnedByMe:Z

.field private final synthetic this$0:Lfreemarker/template/DefaultIteratorAdapter;


# direct methods
.method private constructor <init>(Lfreemarker/template/DefaultIteratorAdapter;)V
    .locals 0

    .line 75
    iput-object p1, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->this$0:Lfreemarker/template/DefaultIteratorAdapter;

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method synthetic constructor <init>(Lfreemarker/template/DefaultIteratorAdapter;Lfreemarker/template/DefaultIteratorAdapter$1;)V
    .locals 0
    .param p1, "x0"    # Lfreemarker/template/DefaultIteratorAdapter;
    .param p2, "x1"    # Lfreemarker/template/DefaultIteratorAdapter$1;

    .line 75
    invoke-direct {p0, p1}, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;-><init>(Lfreemarker/template/DefaultIteratorAdapter;)V

    return-void
.end method

.method private takeIteratorOwnership()V
    .locals 2
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateModelException;
        }
    .end annotation

    .line 102
    iget-object v0, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->this$0:Lfreemarker/template/DefaultIteratorAdapter;

    invoke-static {v0}, Lfreemarker/template/DefaultIteratorAdapter;->access$200(Lfreemarker/template/DefaultIteratorAdapter;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 106
    iget-object v0, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->this$0:Lfreemarker/template/DefaultIteratorAdapter;

    const/4 v1, 0x1

    invoke-static {v0, v1}, Lfreemarker/template/DefaultIteratorAdapter;->access$202(Lfreemarker/template/DefaultIteratorAdapter;Z)Z

    .line 107
    iput-boolean v1, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->iteratorOwnedByMe:Z

    .line 109
    return-void

    .line 103
    :cond_0
    new-instance v0, Lfreemarker/template/TemplateModelException;

    const-string v1, "This collection value wraps a java.util.Iterator, thus it can be listed only once."

    invoke-direct {v0, v1}, Lfreemarker/template/TemplateModelException;-><init>(Ljava/lang/String;)V

    throw v0
.end method


# virtual methods
.method public hasNext()Z
    .locals 1
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateModelException;
        }
    .end annotation

    .line 94
    iget-boolean v0, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->iteratorOwnedByMe:Z

    if-nez v0, :cond_0

    .line 95
    invoke-direct {p0}, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->takeIteratorOwnership()V

    .line 98
    :cond_0
    iget-object v0, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->this$0:Lfreemarker/template/DefaultIteratorAdapter;

    invoke-static {v0}, Lfreemarker/template/DefaultIteratorAdapter;->access$100(Lfreemarker/template/DefaultIteratorAdapter;)Ljava/util/Iterator;

    move-result-object v0

    invoke-interface {v0}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    return v0
.end method

.method public next()Lfreemarker/template/TemplateModel;
    .locals 2
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateModelException;
        }
    .end annotation

    .line 80
    iget-boolean v0, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->iteratorOwnedByMe:Z

    if-nez v0, :cond_0

    .line 81
    invoke-direct {p0}, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->takeIteratorOwnership()V

    .line 84
    :cond_0
    iget-object v0, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->this$0:Lfreemarker/template/DefaultIteratorAdapter;

    invoke-static {v0}, Lfreemarker/template/DefaultIteratorAdapter;->access$100(Lfreemarker/template/DefaultIteratorAdapter;)Ljava/util/Iterator;

    move-result-object v0

    invoke-interface {v0}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_2

    .line 88
    iget-object v0, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->this$0:Lfreemarker/template/DefaultIteratorAdapter;

    invoke-static {v0}, Lfreemarker/template/DefaultIteratorAdapter;->access$100(Lfreemarker/template/DefaultIteratorAdapter;)Ljava/util/Iterator;

    move-result-object v0

    invoke-interface {v0}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    .line 89
    .local v0, "value":Ljava/lang/Object;
    instance-of v1, v0, Lfreemarker/template/TemplateModel;

    if-eqz v1, :cond_1

    move-object v1, v0

    check-cast v1, Lfreemarker/template/TemplateModel;

    goto :goto_0

    :cond_1
    iget-object v1, p0, Lfreemarker/template/DefaultIteratorAdapter$SimpleTemplateModelIterator;->this$0:Lfreemarker/template/DefaultIteratorAdapter;

    invoke-virtual {v1, v0}, Lfreemarker/template/DefaultIteratorAdapter;->wrap(Ljava/lang/Object;)Lfreemarker/template/TemplateModel;

    move-result-object v1

    :goto_0
    return-object v1

    .line 85
    .end local v0    # "value":Ljava/lang/Object;
    :cond_2
    new-instance v0, Lfreemarker/template/TemplateModelException;

    const-string v1, "The collection has no more items."

    invoke-direct {v0, v1}, Lfreemarker/template/TemplateModelException;-><init>(Ljava/lang/String;)V

    throw v0
.end method
