.class Lfreemarker/core/APINotSupportedTemplateException;
.super Lfreemarker/template/TemplateException;
.source "APINotSupportedTemplateException.java"


# direct methods
.method constructor <init>(Lfreemarker/core/Environment;Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;)V
    .locals 2
    .param p1, "env"    # Lfreemarker/core/Environment;
    .param p2, "blamedExpr"    # Lfreemarker/core/Expression;
    .param p3, "model"    # Lfreemarker/template/TemplateModel;

    .line 33
    invoke-static {p1, p2, p3}, Lfreemarker/core/APINotSupportedTemplateException;->buildDescription(Lfreemarker/core/Environment;Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;)Lfreemarker/core/_ErrorDescriptionBuilder;

    move-result-object v0

    const/4 v1, 0x0

    invoke-direct {p0, v1, p1, p2, v0}, Lfreemarker/template/TemplateException;-><init>(Ljava/lang/Throwable;Lfreemarker/core/Environment;Lfreemarker/core/Expression;Lfreemarker/core/_ErrorDescriptionBuilder;)V

    .line 34
    return-void
.end method

.method protected static buildDescription(Lfreemarker/core/Environment;Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;)Lfreemarker/core/_ErrorDescriptionBuilder;
    .locals 10
    .param p0, "env"    # Lfreemarker/core/Environment;
    .param p1, "blamedExpr"    # Lfreemarker/core/Expression;
    .param p2, "tm"    # Lfreemarker/template/TemplateModel;

    .line 38
    new-instance v0, Lfreemarker/core/_ErrorDescriptionBuilder;

    const/4 v1, 0x7

    new-array v1, v1, [Ljava/lang/Object;

    const-string v2, "The value doesn\'t support ?api. See requirements in the FreeMarker Manual. (FTL type: "

    const/4 v3, 0x0

    aput-object v2, v1, v3

    new-instance v2, Lfreemarker/core/_DelayedFTLTypeDescription;

    invoke-direct {v2, p2}, Lfreemarker/core/_DelayedFTLTypeDescription;-><init>(Lfreemarker/template/TemplateModel;)V

    const/4 v4, 0x1

    aput-object v2, v1, v4

    const-string v2, ", TemplateModel class: "

    const/4 v5, 0x2

    aput-object v2, v1, v5

    new-instance v2, Lfreemarker/core/_DelayedShortClassName;

    .line 41
    invoke-virtual {p2}, Ljava/lang/Object;->getClass()Ljava/lang/Class;

    move-result-object v6

    invoke-direct {v2, v6}, Lfreemarker/core/_DelayedShortClassName;-><init>(Ljava/lang/Class;)V

    const/4 v6, 0x3

    aput-object v2, v1, v6

    const/4 v2, 0x4

    const-string v7, ", ObjectWapper: "

    aput-object v7, v1, v2

    new-instance v2, Lfreemarker/core/_DelayedToString;

    .line 42
    invoke-virtual {p0}, Lfreemarker/core/Environment;->getObjectWrapper()Lfreemarker/template/ObjectWrapper;

    move-result-object v7

    invoke-direct {v2, v7}, Lfreemarker/core/_DelayedToString;-><init>(Ljava/lang/Object;)V

    const/4 v7, 0x5

    aput-object v2, v1, v7

    const/4 v2, 0x6

    const-string v7, ")"

    aput-object v7, v1, v2

    invoke-direct {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;-><init>([Ljava/lang/Object;)V

    .line 43
    invoke-virtual {v0, p1}, Lfreemarker/core/_ErrorDescriptionBuilder;->blame(Lfreemarker/core/Expression;)Lfreemarker/core/_ErrorDescriptionBuilder;

    move-result-object v0

    .line 45
    .local v0, "desc":Lfreemarker/core/_ErrorDescriptionBuilder;
    invoke-virtual {p1}, Lfreemarker/core/Expression;->isLiteral()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 46
    const-string v1, "Only adapted Java objects can possibly have API, not values created inside templates."

    invoke-virtual {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;->tip(Ljava/lang/String;)Lfreemarker/core/_ErrorDescriptionBuilder;

    goto :goto_0

    .line 48
    :cond_0
    invoke-virtual {p0}, Lfreemarker/core/Environment;->getObjectWrapper()Lfreemarker/template/ObjectWrapper;

    move-result-object v1

    .line 49
    .local v1, "ow":Lfreemarker/template/ObjectWrapper;
    instance-of v2, v1, Lfreemarker/template/DefaultObjectWrapper;

    if-eqz v2, :cond_3

    instance-of v2, p2, Lfreemarker/template/SimpleHash;

    if-nez v2, :cond_1

    instance-of v2, p2, Lfreemarker/template/SimpleSequence;

    if-eqz v2, :cond_3

    .line 51
    :cond_1
    move-object v2, v1

    check-cast v2, Lfreemarker/template/DefaultObjectWrapper;

    .line 52
    .local v2, "dow":Lfreemarker/template/DefaultObjectWrapper;
    invoke-virtual {v2}, Lfreemarker/template/DefaultObjectWrapper;->getUseAdaptersForContainers()Z

    move-result v7

    const-string v8, "object_wrapper"

    const-string v9, "In the FreeMarker configuration, \""

    if-nez v7, :cond_2

    .line 53
    new-array v6, v6, [Ljava/lang/Object;

    aput-object v9, v6, v3

    aput-object v8, v6, v4

    const-string v3, "\" is a DefaultObjectWrapper with its \"useAdaptersForContainers\" property set to false. Setting it to true might solves this problem."

    aput-object v3, v6, v5

    invoke-virtual {v0, v6}, Lfreemarker/core/_ErrorDescriptionBuilder;->tip([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    .line 57
    invoke-virtual {v2}, Lfreemarker/template/DefaultObjectWrapper;->getIncompatibleImprovements()Lfreemarker/template/Version;

    move-result-object v3

    invoke-virtual {v3}, Lfreemarker/template/Version;->intValue()I

    move-result v3

    sget v4, Lfreemarker/template/_TemplateAPI;->VERSION_INT_2_3_22:I

    if-ge v3, v4, :cond_3

    .line 58
    const-string v3, "Setting DefaultObjectWrapper\'s \"incompatibleImprovements\" to 2.3.22 or higher will change the default value of \"useAdaptersForContainers\" to true."

    invoke-virtual {v0, v3}, Lfreemarker/core/_ErrorDescriptionBuilder;->tip(Ljava/lang/String;)Lfreemarker/core/_ErrorDescriptionBuilder;

    goto :goto_0

    .line 61
    :cond_2
    instance-of v7, p2, Lfreemarker/template/SimpleSequence;

    if-eqz v7, :cond_3

    invoke-virtual {v2}, Lfreemarker/template/DefaultObjectWrapper;->getForceLegacyNonListCollections()Z

    move-result v7

    if-eqz v7, :cond_3

    .line 62
    new-array v6, v6, [Ljava/lang/Object;

    aput-object v9, v6, v3

    aput-object v8, v6, v4

    const-string v3, "\" is a DefaultObjectWrapper with its \"forceLegacyNonListCollections\" property set to true. If you are trying to access the API of a non-List Collection, setting the \"forceLegacyNonListCollections\" property to false might solves this problem."

    aput-object v3, v6, v5

    invoke-virtual {v0, v6}, Lfreemarker/core/_ErrorDescriptionBuilder;->tip([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    .line 72
    .end local v1    # "ow":Lfreemarker/template/ObjectWrapper;
    .end local v2    # "dow":Lfreemarker/template/DefaultObjectWrapper;
    :cond_3
    :goto_0
    return-object v0
.end method
