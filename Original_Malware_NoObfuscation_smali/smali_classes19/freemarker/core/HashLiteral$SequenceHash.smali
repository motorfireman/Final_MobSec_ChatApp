.class Lfreemarker/core/HashLiteral$SequenceHash;
.super Ljava/lang/Object;
.source "HashLiteral.java"

# interfaces
.implements Lfreemarker/template/TemplateHashModelEx;


# annotations
.annotation system Ldalvik/annotation/EnclosingClass;
    value = Lfreemarker/core/HashLiteral;
.end annotation

.annotation system Ldalvik/annotation/InnerClass;
    accessFlags = 0x2
    name = "SequenceHash"
.end annotation


# instance fields
.field private keyCollection:Lfreemarker/template/TemplateCollectionModel;

.field private map:Ljava/util/HashMap;

.field private final synthetic this$0:Lfreemarker/core/HashLiteral;

.field private valueCollection:Lfreemarker/template/TemplateCollectionModel;


# direct methods
.method constructor <init>(Lfreemarker/core/HashLiteral;Lfreemarker/core/Environment;)V
    .locals 8
    .param p2, "env"    # Lfreemarker/core/Environment;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;
        }
    .end annotation

    .line 103
    iput-object p1, p0, Lfreemarker/core/HashLiteral$SequenceHash;->this$0:Lfreemarker/core/HashLiteral;

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    .line 104
    invoke-static {p1}, Lfreemarker/template/_TemplateAPI;->getTemplateLanguageVersionAsInt(Lfreemarker/core/TemplateObject;)I

    move-result v0

    sget v1, Lfreemarker/template/_TemplateAPI;->VERSION_INT_2_3_21:I

    if-lt v0, v1, :cond_3

    .line 105
    new-instance v0, Ljava/util/LinkedHashMap;

    invoke-direct {v0}, Ljava/util/LinkedHashMap;-><init>()V

    iput-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->map:Ljava/util/HashMap;

    .line 106
    const/4 v0, 0x0

    .local v0, "i":I
    :goto_0
    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$000(Lfreemarker/core/HashLiteral;)I

    move-result v1

    if-ge v0, v1, :cond_2

    .line 107
    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$100(Lfreemarker/core/HashLiteral;)Ljava/util/ArrayList;

    move-result-object v1

    invoke-virtual {v1, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lfreemarker/core/Expression;

    .line 108
    .local v1, "keyExp":Lfreemarker/core/Expression;
    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$200(Lfreemarker/core/HashLiteral;)Ljava/util/ArrayList;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lfreemarker/core/Expression;

    .line 109
    .local v2, "valExp":Lfreemarker/core/Expression;
    invoke-virtual {v1, p2}, Lfreemarker/core/Expression;->evalAndCoerceToString(Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v3

    .line 110
    .local v3, "key":Ljava/lang/String;
    invoke-virtual {v2, p2}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v4

    .line 111
    .local v4, "value":Lfreemarker/template/TemplateModel;
    if-eqz p2, :cond_0

    invoke-virtual {p2}, Lfreemarker/core/Environment;->isClassicCompatible()Z

    move-result v5

    if-nez v5, :cond_1

    .line 112
    :cond_0
    invoke-virtual {v2, v4, p2}, Lfreemarker/core/Expression;->assertNonNull(Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)V

    .line 114
    :cond_1
    iget-object v5, p0, Lfreemarker/core/HashLiteral$SequenceHash;->map:Ljava/util/HashMap;

    invoke-virtual {v5, v3, v4}, Ljava/util/HashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 106
    .end local v1    # "keyExp":Lfreemarker/core/Expression;
    .end local v2    # "valExp":Lfreemarker/core/Expression;
    .end local v3    # "key":Ljava/lang/String;
    .end local v4    # "value":Lfreemarker/template/TemplateModel;
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .end local v0    # "i":I
    :cond_2
    goto :goto_2

    .line 119
    :cond_3
    new-instance v0, Ljava/util/HashMap;

    invoke-direct {v0}, Ljava/util/HashMap;-><init>()V

    iput-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->map:Ljava/util/HashMap;

    .line 120
    new-instance v0, Ljava/util/ArrayList;

    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$000(Lfreemarker/core/HashLiteral;)I

    move-result v1

    invoke-direct {v0, v1}, Ljava/util/ArrayList;-><init>(I)V

    .line 121
    .local v0, "keyList":Ljava/util/ArrayList;
    new-instance v1, Ljava/util/ArrayList;

    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$000(Lfreemarker/core/HashLiteral;)I

    move-result v2

    invoke-direct {v1, v2}, Ljava/util/ArrayList;-><init>(I)V

    .line 122
    .local v1, "valueList":Ljava/util/ArrayList;
    const/4 v2, 0x0

    .local v2, "i":I
    :goto_1
    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$000(Lfreemarker/core/HashLiteral;)I

    move-result v3

    if-ge v2, v3, :cond_6

    .line 123
    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$100(Lfreemarker/core/HashLiteral;)Ljava/util/ArrayList;

    move-result-object v3

    invoke-virtual {v3, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lfreemarker/core/Expression;

    .line 124
    .local v3, "keyExp":Lfreemarker/core/Expression;
    invoke-static {p1}, Lfreemarker/core/HashLiteral;->access$200(Lfreemarker/core/HashLiteral;)Ljava/util/ArrayList;

    move-result-object v4

    invoke-virtual {v4, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lfreemarker/core/Expression;

    .line 125
    .local v4, "valExp":Lfreemarker/core/Expression;
    invoke-virtual {v3, p2}, Lfreemarker/core/Expression;->evalAndCoerceToString(Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v5

    .line 126
    .local v5, "key":Ljava/lang/String;
    invoke-virtual {v4, p2}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v6

    .line 127
    .local v6, "value":Lfreemarker/template/TemplateModel;
    if-eqz p2, :cond_4

    invoke-virtual {p2}, Lfreemarker/core/Environment;->isClassicCompatible()Z

    move-result v7

    if-nez v7, :cond_5

    .line 128
    :cond_4
    invoke-virtual {v4, v6, p2}, Lfreemarker/core/Expression;->assertNonNull(Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)V

    .line 130
    :cond_5
    iget-object v7, p0, Lfreemarker/core/HashLiteral$SequenceHash;->map:Ljava/util/HashMap;

    invoke-virtual {v7, v5, v6}, Ljava/util/HashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 131
    invoke-virtual {v0, v5}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 132
    invoke-virtual {v1, v6}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 122
    .end local v3    # "keyExp":Lfreemarker/core/Expression;
    .end local v4    # "valExp":Lfreemarker/core/Expression;
    .end local v5    # "key":Ljava/lang/String;
    .end local v6    # "value":Lfreemarker/template/TemplateModel;
    add-int/lit8 v2, v2, 0x1

    goto :goto_1

    .line 134
    .end local v2    # "i":I
    :cond_6
    new-instance p1, Lfreemarker/core/CollectionAndSequence;

    new-instance v2, Lfreemarker/template/SimpleSequence;

    invoke-direct {v2, v0}, Lfreemarker/template/SimpleSequence;-><init>(Ljava/util/Collection;)V

    invoke-direct {p1, v2}, Lfreemarker/core/CollectionAndSequence;-><init>(Lfreemarker/template/TemplateSequenceModel;)V

    iput-object p1, p0, Lfreemarker/core/HashLiteral$SequenceHash;->keyCollection:Lfreemarker/template/TemplateCollectionModel;

    .line 135
    new-instance p1, Lfreemarker/core/CollectionAndSequence;

    new-instance v2, Lfreemarker/template/SimpleSequence;

    invoke-direct {v2, v1}, Lfreemarker/template/SimpleSequence;-><init>(Ljava/util/Collection;)V

    invoke-direct {p1, v2}, Lfreemarker/core/CollectionAndSequence;-><init>(Lfreemarker/template/TemplateSequenceModel;)V

    iput-object p1, p0, Lfreemarker/core/HashLiteral$SequenceHash;->valueCollection:Lfreemarker/template/TemplateCollectionModel;

    .line 137
    .end local v0    # "keyList":Ljava/util/ArrayList;
    .end local v1    # "valueList":Ljava/util/ArrayList;
    :goto_2
    return-void
.end method


# virtual methods
.method public get(Ljava/lang/String;)Lfreemarker/template/TemplateModel;
    .locals 1
    .param p1, "key"    # Ljava/lang/String;

    .line 160
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->map:Ljava/util/HashMap;

    invoke-virtual {v0, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lfreemarker/template/TemplateModel;

    return-object v0
.end method

.method public isEmpty()Z
    .locals 1

    .line 164
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->this$0:Lfreemarker/core/HashLiteral;

    invoke-static {v0}, Lfreemarker/core/HashLiteral;->access$000(Lfreemarker/core/HashLiteral;)I

    move-result v0

    if-nez v0, :cond_0

    const/4 v0, 0x1

    goto :goto_0

    :cond_0
    const/4 v0, 0x0

    :goto_0
    return v0
.end method

.method public keys()Lfreemarker/template/TemplateCollectionModel;
    .locals 3

    .line 144
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->keyCollection:Lfreemarker/template/TemplateCollectionModel;

    if-nez v0, :cond_0

    .line 146
    new-instance v0, Lfreemarker/core/CollectionAndSequence;

    new-instance v1, Lfreemarker/template/SimpleSequence;

    iget-object v2, p0, Lfreemarker/core/HashLiteral$SequenceHash;->map:Ljava/util/HashMap;

    invoke-virtual {v2}, Ljava/util/HashMap;->keySet()Ljava/util/Set;

    move-result-object v2

    invoke-direct {v1, v2}, Lfreemarker/template/SimpleSequence;-><init>(Ljava/util/Collection;)V

    invoke-direct {v0, v1}, Lfreemarker/core/CollectionAndSequence;-><init>(Lfreemarker/template/TemplateSequenceModel;)V

    iput-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->keyCollection:Lfreemarker/template/TemplateCollectionModel;

    .line 148
    :cond_0
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->keyCollection:Lfreemarker/template/TemplateCollectionModel;

    return-object v0
.end method

.method public size()I
    .locals 1

    .line 140
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->this$0:Lfreemarker/core/HashLiteral;

    invoke-static {v0}, Lfreemarker/core/HashLiteral;->access$000(Lfreemarker/core/HashLiteral;)I

    move-result v0

    return v0
.end method

.method public toString()Ljava/lang/String;
    .locals 1

    .line 168
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->this$0:Lfreemarker/core/HashLiteral;

    invoke-virtual {v0}, Lfreemarker/core/HashLiteral;->getCanonicalForm()Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method public values()Lfreemarker/template/TemplateCollectionModel;
    .locals 3

    .line 152
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->valueCollection:Lfreemarker/template/TemplateCollectionModel;

    if-nez v0, :cond_0

    .line 154
    new-instance v0, Lfreemarker/core/CollectionAndSequence;

    new-instance v1, Lfreemarker/template/SimpleSequence;

    iget-object v2, p0, Lfreemarker/core/HashLiteral$SequenceHash;->map:Ljava/util/HashMap;

    invoke-virtual {v2}, Ljava/util/HashMap;->values()Ljava/util/Collection;

    move-result-object v2

    invoke-direct {v1, v2}, Lfreemarker/template/SimpleSequence;-><init>(Ljava/util/Collection;)V

    invoke-direct {v0, v1}, Lfreemarker/core/CollectionAndSequence;-><init>(Lfreemarker/template/TemplateSequenceModel;)V

    iput-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->valueCollection:Lfreemarker/template/TemplateCollectionModel;

    .line 156
    :cond_0
    iget-object v0, p0, Lfreemarker/core/HashLiteral$SequenceHash;->valueCollection:Lfreemarker/template/TemplateCollectionModel;

    return-object v0
.end method
