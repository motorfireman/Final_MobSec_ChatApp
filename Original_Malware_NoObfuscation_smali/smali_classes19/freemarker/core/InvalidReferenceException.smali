.class public Lfreemarker/core/InvalidReferenceException;
.super Lfreemarker/template/TemplateException;
.source "InvalidReferenceException.java"


# static fields
.field static final FAST_INSTANCE:Lfreemarker/core/InvalidReferenceException;

.field private static final TIP:[Ljava/lang/String;

.field private static final TIP_JSP_TAGLIBS:Ljava/lang/String; = "The \"JspTaglibs\" variable isn\'t a core FreeMarker feature; it\'s only available when templates are invoked through freemarker.ext.servlet.FreemarkerServlet (or other custom FreeMarker-JSP integration solution)."

.field private static final TIP_LAST_STEP_DOT:Ljava/lang/String; = "It\'s the step after the last dot that caused this error, not those before it."

.field private static final TIP_LAST_STEP_SQUARE_BRACKET:Ljava/lang/String; = "It\'s the final [] step that caused this error, not those before it."

.field private static final TIP_MISSING_ASSIGNMENT_TARGET:[Ljava/lang/String;

.field private static final TIP_NO_DOLLAR:Ljava/lang/String; = "Variable references must not start with \"$\", unless the \"$\" is really part of the variable name."


# direct methods
.method static constructor <clinit>()V
    .locals 11

    .line 29
    invoke-static {}, Lfreemarker/core/Environment;->getCurrentEnvironment()Lfreemarker/core/Environment;

    move-result-object v0

    .line 31
    .local v0, "prevEnv":Lfreemarker/core/Environment;
    const/4 v1, 0x0

    :try_start_0
    invoke-static {v1}, Lfreemarker/core/Environment;->setCurrentEnvironment(Lfreemarker/core/Environment;)V

    .line 32
    new-instance v2, Lfreemarker/core/InvalidReferenceException;

    const-string v3, "Invalid reference. Details are unavilable, as this should have been handled by an FTL construct. If it wasn\'t, that\'s problably a bug in FreeMarker."

    invoke-direct {v2, v3, v1}, Lfreemarker/core/InvalidReferenceException;-><init>(Ljava/lang/String;Lfreemarker/core/Environment;)V

    sput-object v2, Lfreemarker/core/InvalidReferenceException;->FAST_INSTANCE:Lfreemarker/core/InvalidReferenceException;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 37
    invoke-static {v0}, Lfreemarker/core/Environment;->setCurrentEnvironment(Lfreemarker/core/Environment;)V

    .line 38
    nop

    .line 41
    .end local v0    # "prevEnv":Lfreemarker/core/Environment;
    const-string v4, "If the failing expression is known to be legally refer to something that\'s sometimes null or missing, either specify a default value like myOptionalVar!myDefault, or use "

    const-string v5, "<#if myOptionalVar??>"

    const-string/jumbo v6, "when-present"

    const-string v7, "<#else>"

    const-string/jumbo v8, "when-missing"

    const-string v9, "</#if>"

    const-string v10, ". (These only cover the last step of the expression; to cover the whole expression, use parenthesis: (myOptionalVar.foo)!myDefault, (myOptionalVar.foo)??"

    filled-new-array/range {v4 .. v10}, [Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lfreemarker/core/InvalidReferenceException;->TIP:[Ljava/lang/String;

    .line 49
    const-string v1, "If the target variable is known to be legally null or missing sometimes, instead of something like "

    const-string v2, "<#assign x += 1>"

    const-string v3, ", you could write "

    const-string v4, "<#if x??>"

    const-string v5, "<#assign x += 1>"

    const-string v6, "</#if>"

    const-string v7, " or "

    const-string v8, "<#assign x = (x!0) + 1>"

    filled-new-array/range {v1 .. v8}, [Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lfreemarker/core/InvalidReferenceException;->TIP_MISSING_ASSIGNMENT_TARGET:[Ljava/lang/String;

    return-void

    .line 37
    .restart local v0    # "prevEnv":Lfreemarker/core/Environment;
    :catchall_0
    move-exception v1

    invoke-static {v0}, Lfreemarker/core/Environment;->setCurrentEnvironment(Lfreemarker/core/Environment;)V

    throw v1
.end method

.method public constructor <init>(Lfreemarker/core/Environment;)V
    .locals 1
    .param p1, "env"    # Lfreemarker/core/Environment;

    .line 74
    const-string v0, "Invalid reference: The expression has evaluated to null or refers to something that doesn\'t exist."

    invoke-direct {p0, v0, p1}, Lfreemarker/template/TemplateException;-><init>(Ljava/lang/String;Lfreemarker/core/Environment;)V

    .line 76
    return-void
.end method

.method constructor <init>(Lfreemarker/core/_ErrorDescriptionBuilder;Lfreemarker/core/Environment;Lfreemarker/core/Expression;)V
    .locals 1
    .param p1, "description"    # Lfreemarker/core/_ErrorDescriptionBuilder;
    .param p2, "env"    # Lfreemarker/core/Environment;
    .param p3, "expression"    # Lfreemarker/core/Expression;

    .line 95
    const/4 v0, 0x0

    invoke-direct {p0, v0, p2, p3, p1}, Lfreemarker/template/TemplateException;-><init>(Ljava/lang/Throwable;Lfreemarker/core/Environment;Lfreemarker/core/Expression;Lfreemarker/core/_ErrorDescriptionBuilder;)V

    .line 96
    return-void
.end method

.method public constructor <init>(Ljava/lang/String;Lfreemarker/core/Environment;)V
    .locals 0
    .param p1, "description"    # Ljava/lang/String;
    .param p2, "env"    # Lfreemarker/core/Environment;

    .line 84
    invoke-direct {p0, p1, p2}, Lfreemarker/template/TemplateException;-><init>(Ljava/lang/String;Lfreemarker/core/Environment;)V

    .line 85
    return-void
.end method

.method private static endsWithDollarVariable(Lfreemarker/core/Expression;)Z
    .locals 2
    .param p0, "blame"    # Lfreemarker/core/Expression;

    .line 162
    instance-of v0, p0, Lfreemarker/core/Identifier;

    const-string v1, "$"

    if-eqz v0, :cond_0

    move-object v0, p0

    check-cast v0, Lfreemarker/core/Identifier;

    invoke-virtual {v0}, Lfreemarker/core/Identifier;->getName()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v0, v1}, Ljava/lang/String;->startsWith(Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_1

    :cond_0
    instance-of v0, p0, Lfreemarker/core/Dot;

    if-eqz v0, :cond_2

    move-object v0, p0

    check-cast v0, Lfreemarker/core/Dot;

    .line 163
    invoke-virtual {v0}, Lfreemarker/core/Dot;->getRHO()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v0, v1}, Ljava/lang/String;->startsWith(Ljava/lang/String;)Z

    move-result v0

    if-eqz v0, :cond_2

    :cond_1
    const/4 v0, 0x1

    goto :goto_0

    :cond_2
    const/4 v0, 0x0

    :goto_0
    return v0
.end method

.method static getInstance(Lfreemarker/core/Expression;Lfreemarker/core/Environment;)Lfreemarker/core/InvalidReferenceException;
    .locals 8
    .param p0, "blamed"    # Lfreemarker/core/Expression;
    .param p1, "env"    # Lfreemarker/core/Environment;

    .line 103
    if-eqz p1, :cond_0

    invoke-virtual {p1}, Lfreemarker/core/Environment;->getFastInvalidReferenceExceptions()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 104
    sget-object v0, Lfreemarker/core/InvalidReferenceException;->FAST_INSTANCE:Lfreemarker/core/InvalidReferenceException;

    return-object v0

    .line 106
    :cond_0
    if-eqz p0, :cond_8

    .line 107
    new-instance v0, Lfreemarker/core/_ErrorDescriptionBuilder;

    const-string v1, "The following has evaluated to null or missing:"

    invoke-direct {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;-><init>(Ljava/lang/String;)V

    .line 108
    invoke-virtual {v0, p0}, Lfreemarker/core/_ErrorDescriptionBuilder;->blame(Lfreemarker/core/Expression;)Lfreemarker/core/_ErrorDescriptionBuilder;

    move-result-object v0

    .line 109
    .local v0, "errDescBuilder":Lfreemarker/core/_ErrorDescriptionBuilder;
    invoke-static {p0}, Lfreemarker/core/InvalidReferenceException;->endsWithDollarVariable(Lfreemarker/core/Expression;)Z

    move-result v1

    const/4 v2, 0x1

    const/4 v3, 0x0

    const/4 v4, 0x2

    if-eqz v1, :cond_1

    .line 110
    new-array v1, v4, [Ljava/lang/Object;

    const-string v4, "Variable references must not start with \"$\", unless the \"$\" is really part of the variable name."

    aput-object v4, v1, v3

    sget-object v3, Lfreemarker/core/InvalidReferenceException;->TIP:[Ljava/lang/String;

    aput-object v3, v1, v2

    invoke-virtual {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;->tips([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    goto/16 :goto_2

    .line 111
    :cond_1
    instance-of v1, p0, Lfreemarker/core/Dot;

    if-eqz v1, :cond_5

    .line 112
    move-object v1, p0

    check-cast v1, Lfreemarker/core/Dot;

    invoke-virtual {v1}, Lfreemarker/core/Dot;->getRHO()Ljava/lang/String;

    move-result-object v1

    .line 113
    .local v1, "rho":Ljava/lang/String;
    const/4 v5, 0x0

    .line 114
    .local v5, "nameFixTip":Ljava/lang/String;
    const-string v6, "size"

    invoke-virtual {v6, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v6

    if-eqz v6, :cond_2

    .line 115
    const-string v5, "To query the size of a collection or map use ?size, like myList?size"

    goto :goto_0

    .line 116
    :cond_2
    const-string v6, "length"

    invoke-virtual {v6, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v6

    if-eqz v6, :cond_3

    .line 117
    const-string v5, "To query the length of a string use ?length, like myString?size"

    .line 119
    :cond_3
    :goto_0
    const-string v6, "It\'s the step after the last dot that caused this error, not those before it."

    if-nez v5, :cond_4

    new-array v4, v4, [Ljava/lang/Object;

    aput-object v6, v4, v3

    sget-object v3, Lfreemarker/core/InvalidReferenceException;->TIP:[Ljava/lang/String;

    aput-object v3, v4, v2

    goto :goto_1

    :cond_4
    const/4 v7, 0x3

    new-array v7, v7, [Ljava/lang/Object;

    aput-object v6, v7, v3

    aput-object v5, v7, v2

    sget-object v2, Lfreemarker/core/InvalidReferenceException;->TIP:[Ljava/lang/String;

    aput-object v2, v7, v4

    move-object v4, v7

    :goto_1
    invoke-virtual {v0, v4}, Lfreemarker/core/_ErrorDescriptionBuilder;->tips([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    .line 123
    .end local v1    # "rho":Ljava/lang/String;
    .end local v5    # "nameFixTip":Ljava/lang/String;
    goto :goto_2

    :cond_5
    instance-of v1, p0, Lfreemarker/core/DynamicKeyName;

    if-eqz v1, :cond_6

    .line 124
    new-array v1, v4, [Ljava/lang/Object;

    const-string v4, "It\'s the final [] step that caused this error, not those before it."

    aput-object v4, v1, v3

    sget-object v3, Lfreemarker/core/InvalidReferenceException;->TIP:[Ljava/lang/String;

    aput-object v3, v1, v2

    invoke-virtual {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;->tips([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    goto :goto_2

    .line 125
    :cond_6
    instance-of v1, p0, Lfreemarker/core/Identifier;

    if-eqz v1, :cond_7

    move-object v1, p0

    check-cast v1, Lfreemarker/core/Identifier;

    .line 126
    invoke-virtual {v1}, Lfreemarker/core/Identifier;->getName()Ljava/lang/String;

    move-result-object v1

    const-string v5, "JspTaglibs"

    invoke-virtual {v1, v5}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_7

    .line 127
    new-array v1, v4, [Ljava/lang/Object;

    const-string v4, "The \"JspTaglibs\" variable isn\'t a core FreeMarker feature; it\'s only available when templates are invoked through freemarker.ext.servlet.FreemarkerServlet (or other custom FreeMarker-JSP integration solution)."

    aput-object v4, v1, v3

    sget-object v3, Lfreemarker/core/InvalidReferenceException;->TIP:[Ljava/lang/String;

    aput-object v3, v1, v2

    invoke-virtual {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;->tips([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    goto :goto_2

    .line 129
    :cond_7
    sget-object v1, Lfreemarker/core/InvalidReferenceException;->TIP:[Ljava/lang/String;

    invoke-virtual {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;->tip([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    .line 131
    :goto_2
    new-instance v1, Lfreemarker/core/InvalidReferenceException;

    invoke-direct {v1, v0, p1, p0}, Lfreemarker/core/InvalidReferenceException;-><init>(Lfreemarker/core/_ErrorDescriptionBuilder;Lfreemarker/core/Environment;Lfreemarker/core/Expression;)V

    return-object v1

    .line 133
    .end local v0    # "errDescBuilder":Lfreemarker/core/_ErrorDescriptionBuilder;
    :cond_8
    new-instance v0, Lfreemarker/core/InvalidReferenceException;

    invoke-direct {v0, p1}, Lfreemarker/core/InvalidReferenceException;-><init>(Lfreemarker/core/Environment;)V

    return-object v0
.end method

.method static getInstance(Ljava/lang/String;Ljava/lang/String;Lfreemarker/core/Environment;)Lfreemarker/core/InvalidReferenceException;
    .locals 7
    .param p0, "missingAssignedVarName"    # Ljava/lang/String;
    .param p1, "assignmentOperator"    # Ljava/lang/String;
    .param p2, "env"    # Lfreemarker/core/Environment;

    .line 143
    if-eqz p2, :cond_0

    invoke-virtual {p2}, Lfreemarker/core/Environment;->getFastInvalidReferenceExceptions()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 144
    sget-object v0, Lfreemarker/core/InvalidReferenceException;->FAST_INSTANCE:Lfreemarker/core/InvalidReferenceException;

    return-object v0

    .line 146
    :cond_0
    new-instance v0, Lfreemarker/core/_ErrorDescriptionBuilder;

    const/4 v1, 0x5

    new-array v1, v1, [Ljava/lang/Object;

    const-string v2, "The target variable of the assignment, "

    const/4 v3, 0x0

    aput-object v2, v1, v3

    new-instance v2, Lfreemarker/core/_DelayedJQuote;

    invoke-direct {v2, p0}, Lfreemarker/core/_DelayedJQuote;-><init>(Ljava/lang/Object;)V

    const/4 v4, 0x1

    aput-object v2, v1, v4

    const-string v2, ", was null or missing, but the \""

    const/4 v5, 0x2

    aput-object v2, v1, v5

    const/4 v2, 0x3

    aput-object p1, v1, v2

    const/4 v2, 0x4

    const-string v6, "\" operator needs to get its value before assigning to it."

    aput-object v6, v1, v2

    invoke-direct {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;-><init>([Ljava/lang/Object;)V

    .line 152
    .local v0, "errDescBuilder":Lfreemarker/core/_ErrorDescriptionBuilder;
    const-string v1, "$"

    invoke-virtual {p0, v1}, Ljava/lang/String;->startsWith(Ljava/lang/String;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 153
    new-array v1, v5, [Ljava/lang/Object;

    const-string v2, "Variable references must not start with \"$\", unless the \"$\" is really part of the variable name."

    aput-object v2, v1, v3

    sget-object v2, Lfreemarker/core/InvalidReferenceException;->TIP_MISSING_ASSIGNMENT_TARGET:[Ljava/lang/String;

    aput-object v2, v1, v4

    invoke-virtual {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;->tips([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    goto :goto_0

    .line 155
    :cond_1
    sget-object v1, Lfreemarker/core/InvalidReferenceException;->TIP_MISSING_ASSIGNMENT_TARGET:[Ljava/lang/String;

    invoke-virtual {v0, v1}, Lfreemarker/core/_ErrorDescriptionBuilder;->tip([Ljava/lang/Object;)Lfreemarker/core/_ErrorDescriptionBuilder;

    .line 157
    :goto_0
    new-instance v1, Lfreemarker/core/InvalidReferenceException;

    const/4 v2, 0x0

    invoke-direct {v1, v0, p2, v2}, Lfreemarker/core/InvalidReferenceException;-><init>(Lfreemarker/core/_ErrorDescriptionBuilder;Lfreemarker/core/Environment;Lfreemarker/core/Expression;)V

    return-object v1
.end method
