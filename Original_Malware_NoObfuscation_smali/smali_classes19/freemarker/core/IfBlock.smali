.class final Lfreemarker/core/IfBlock;
.super Lfreemarker/core/TemplateElement;
.source "IfBlock.java"


# direct methods
.method constructor <init>(Lfreemarker/core/ConditionalBlock;)V
    .locals 1
    .param p1, "block"    # Lfreemarker/core/ConditionalBlock;

    .line 31
    invoke-direct {p0}, Lfreemarker/core/TemplateElement;-><init>()V

    .line 32
    const/4 v0, 0x1

    invoke-virtual {p0, v0}, Lfreemarker/core/IfBlock;->setRegulatedChildBufferCapacity(I)V

    .line 33
    invoke-virtual {p0, p1}, Lfreemarker/core/IfBlock;->addBlock(Lfreemarker/core/ConditionalBlock;)V

    .line 34
    return-void
.end method


# virtual methods
.method accept(Lfreemarker/core/Environment;)V
    .locals 5
    .param p1, "env"    # Lfreemarker/core/Environment;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;,
            Ljava/io/IOException;
        }
    .end annotation

    .line 41
    invoke-virtual {p0}, Lfreemarker/core/IfBlock;->getRegulatedChildCount()I

    move-result v0

    .line 42
    .local v0, "ln":I
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_3

    .line 43
    invoke-virtual {p0, v1}, Lfreemarker/core/IfBlock;->getRegulatedChild(I)Lfreemarker/core/TemplateElement;

    move-result-object v2

    check-cast v2, Lfreemarker/core/ConditionalBlock;

    .line 44
    .local v2, "cblock":Lfreemarker/core/ConditionalBlock;
    iget-object v3, v2, Lfreemarker/core/ConditionalBlock;->condition:Lfreemarker/core/Expression;

    .line 45
    .local v3, "condition":Lfreemarker/core/Expression;
    invoke-virtual {p1, v2}, Lfreemarker/core/Environment;->replaceElementStackTop(Lfreemarker/core/TemplateElement;)V

    .line 46
    if-eqz v3, :cond_1

    invoke-virtual {v3, p1}, Lfreemarker/core/Expression;->evalToBoolean(Lfreemarker/core/Environment;)Z

    move-result v4

    if-eqz v4, :cond_0

    goto :goto_1

    .line 42
    .end local v2    # "cblock":Lfreemarker/core/ConditionalBlock;
    .end local v3    # "condition":Lfreemarker/core/Expression;
    :cond_0
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 47
    .restart local v2    # "cblock":Lfreemarker/core/ConditionalBlock;
    .restart local v3    # "condition":Lfreemarker/core/Expression;
    :cond_1
    :goto_1
    invoke-virtual {v2}, Lfreemarker/core/ConditionalBlock;->getNestedBlock()Lfreemarker/core/TemplateElement;

    move-result-object v4

    if-eqz v4, :cond_2

    .line 48
    invoke-virtual {v2}, Lfreemarker/core/ConditionalBlock;->getNestedBlock()Lfreemarker/core/TemplateElement;

    move-result-object v4

    invoke-virtual {p1, v4}, Lfreemarker/core/Environment;->visitByHiddingParent(Lfreemarker/core/TemplateElement;)V

    .line 50
    :cond_2
    return-void

    .line 53
    .end local v1    # "i":I
    .end local v2    # "cblock":Lfreemarker/core/ConditionalBlock;
    .end local v3    # "condition":Lfreemarker/core/Expression;
    :cond_3
    return-void
.end method

.method addBlock(Lfreemarker/core/ConditionalBlock;)V
    .locals 0
    .param p1, "block"    # Lfreemarker/core/ConditionalBlock;

    .line 37
    invoke-virtual {p0, p1}, Lfreemarker/core/IfBlock;->addRegulatedChild(Lfreemarker/core/TemplateElement;)V

    .line 38
    return-void
.end method

.method protected dump(Z)Ljava/lang/String;
    .locals 5
    .param p1, "canonical"    # Z

    .line 70
    if-eqz p1, :cond_1

    .line 71
    new-instance v0, Ljava/lang/StringBuffer;

    invoke-direct {v0}, Ljava/lang/StringBuffer;-><init>()V

    .line 72
    .local v0, "buf":Ljava/lang/StringBuffer;
    invoke-virtual {p0}, Lfreemarker/core/IfBlock;->getRegulatedChildCount()I

    move-result v1

    .line 73
    .local v1, "ln":I
    const/4 v2, 0x0

    .local v2, "i":I
    :goto_0
    if-ge v2, v1, :cond_0

    .line 74
    invoke-virtual {p0, v2}, Lfreemarker/core/IfBlock;->getRegulatedChild(I)Lfreemarker/core/TemplateElement;

    move-result-object v3

    check-cast v3, Lfreemarker/core/ConditionalBlock;

    .line 75
    .local v3, "cblock":Lfreemarker/core/ConditionalBlock;
    invoke-virtual {v3, p1}, Lfreemarker/core/ConditionalBlock;->dump(Z)Ljava/lang/String;

    move-result-object v4

    invoke-virtual {v0, v4}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 73
    .end local v3    # "cblock":Lfreemarker/core/ConditionalBlock;
    add-int/lit8 v2, v2, 0x1

    goto :goto_0

    .line 77
    .end local v2    # "i":I
    :cond_0
    const-string v2, "</#if>"

    invoke-virtual {v0, v2}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 78
    invoke-virtual {v0}, Ljava/lang/StringBuffer;->toString()Ljava/lang/String;

    move-result-object v2

    return-object v2

    .line 80
    .end local v0    # "buf":Ljava/lang/StringBuffer;
    .end local v1    # "ln":I
    :cond_1
    invoke-virtual {p0}, Lfreemarker/core/IfBlock;->getNodeTypeSymbol()Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method getNodeTypeSymbol()Ljava/lang/String;
    .locals 1

    .line 85
    const-string v0, "#if-#elseif-#else-container"

    return-object v0
.end method

.method getParameterCount()I
    .locals 1

    .line 89
    const/4 v0, 0x0

    return v0
.end method

.method getParameterRole(I)Lfreemarker/core/ParameterRole;
    .locals 1
    .param p1, "idx"    # I

    .line 97
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0
.end method

.method getParameterValue(I)Ljava/lang/Object;
    .locals 1
    .param p1, "idx"    # I

    .line 93
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0
.end method

.method isNestedBlockRepeater()Z
    .locals 1

    .line 105
    const/4 v0, 0x0

    return v0
.end method

.method isShownInStackTrace()Z
    .locals 1

    .line 101
    const/4 v0, 0x0

    return v0
.end method

.method postParseCleanup(Z)Lfreemarker/core/TemplateElement;
    .locals 2
    .param p1, "stripWhitespace"    # Z
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/core/ParseException;
        }
    .end annotation

    .line 58
    invoke-virtual {p0}, Lfreemarker/core/IfBlock;->getRegulatedChildCount()I

    move-result v0

    const/4 v1, 0x1

    if-ne v0, v1, :cond_0

    .line 59
    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lfreemarker/core/IfBlock;->getRegulatedChild(I)Lfreemarker/core/TemplateElement;

    move-result-object v0

    check-cast v0, Lfreemarker/core/ConditionalBlock;

    .line 60
    .local v0, "cblock":Lfreemarker/core/ConditionalBlock;
    iput-boolean v1, v0, Lfreemarker/core/ConditionalBlock;->isLonelyIf:Z

    .line 61
    invoke-virtual {p0}, Lfreemarker/core/IfBlock;->getTemplate()Lfreemarker/template/Template;

    move-result-object v1

    invoke-virtual {v0, v1, v0, p0}, Lfreemarker/core/ConditionalBlock;->setLocation(Lfreemarker/template/Template;Lfreemarker/core/TemplateObject;Lfreemarker/core/TemplateObject;)V

    .line 62
    invoke-virtual {v0, p1}, Lfreemarker/core/ConditionalBlock;->postParseCleanup(Z)Lfreemarker/core/TemplateElement;

    move-result-object v1

    return-object v1

    .line 65
    .end local v0    # "cblock":Lfreemarker/core/ConditionalBlock;
    :cond_0
    invoke-super {p0, p1}, Lfreemarker/core/TemplateElement;->postParseCleanup(Z)Lfreemarker/core/TemplateElement;

    move-result-object v0

    return-object v0
.end method
