.class final Lfreemarker/core/RecurseNode;
.super Lfreemarker/core/TemplateElement;
.source "RecurseNode.java"


# instance fields
.field namespaces:Lfreemarker/core/Expression;

.field targetNode:Lfreemarker/core/Expression;


# direct methods
.method constructor <init>(Lfreemarker/core/Expression;Lfreemarker/core/Expression;)V
    .locals 0
    .param p1, "targetNode"    # Lfreemarker/core/Expression;
    .param p2, "namespaces"    # Lfreemarker/core/Expression;

    .line 37
    invoke-direct {p0}, Lfreemarker/core/TemplateElement;-><init>()V

    .line 38
    iput-object p1, p0, Lfreemarker/core/RecurseNode;->targetNode:Lfreemarker/core/Expression;

    .line 39
    iput-object p2, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    .line 40
    return-void
.end method


# virtual methods
.method accept(Lfreemarker/core/Environment;)V
    .locals 5
    .param p1, "env"    # Lfreemarker/core/Environment;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/io/IOException;,
            Lfreemarker/template/TemplateException;
        }
    .end annotation

    .line 43
    iget-object v0, p0, Lfreemarker/core/RecurseNode;->targetNode:Lfreemarker/core/Expression;

    const/4 v1, 0x0

    if-nez v0, :cond_0

    move-object v0, v1

    goto :goto_0

    :cond_0
    invoke-virtual {v0, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v0

    .line 44
    .local v0, "node":Lfreemarker/template/TemplateModel;
    :goto_0
    if-eqz v0, :cond_2

    instance-of v2, v0, Lfreemarker/template/TemplateNodeModel;

    if-eqz v2, :cond_1

    goto :goto_1

    .line 45
    :cond_1
    new-instance v1, Lfreemarker/core/NonNodeException;

    iget-object v2, p0, Lfreemarker/core/RecurseNode;->targetNode:Lfreemarker/core/Expression;

    const-string v3, "node"

    invoke-direct {v1, v2, v0, v3, p1}, Lfreemarker/core/NonNodeException;-><init>(Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;Ljava/lang/String;Lfreemarker/core/Environment;)V

    throw v1

    .line 48
    :cond_2
    :goto_1
    iget-object v2, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    if-nez v2, :cond_3

    move-object v2, v1

    goto :goto_2

    :cond_3
    invoke-virtual {v2, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v2

    .line 49
    .local v2, "nss":Lfreemarker/template/TemplateModel;
    :goto_2
    iget-object v3, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    instance-of v4, v3, Lfreemarker/core/StringLiteral;

    if-eqz v4, :cond_4

    .line 50
    move-object v3, v2

    check-cast v3, Lfreemarker/template/TemplateScalarModel;

    invoke-interface {v3}, Lfreemarker/template/TemplateScalarModel;->getAsString()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {p1, v3, v1}, Lfreemarker/core/Environment;->importLib(Ljava/lang/String;Ljava/lang/String;)Lfreemarker/core/Environment$Namespace;

    move-result-object v2

    goto :goto_3

    .line 52
    :cond_4
    instance-of v1, v3, Lfreemarker/core/ListLiteral;

    if-eqz v1, :cond_5

    .line 53
    check-cast v3, Lfreemarker/core/ListLiteral;

    invoke-virtual {v3, p1}, Lfreemarker/core/ListLiteral;->evaluateStringsToNamespaces(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateSequenceModel;

    move-result-object v2

    .line 55
    :cond_5
    :goto_3
    if-eqz v2, :cond_8

    .line 56
    instance-of v1, v2, Lfreemarker/template/TemplateHashModel;

    if-eqz v1, :cond_6

    .line 57
    new-instance v1, Lfreemarker/template/SimpleSequence;

    const/4 v3, 0x1

    invoke-direct {v1, v3}, Lfreemarker/template/SimpleSequence;-><init>(I)V

    .line 58
    .local v1, "ss":Lfreemarker/template/SimpleSequence;
    invoke-virtual {v1, v2}, Lfreemarker/template/SimpleSequence;->add(Ljava/lang/Object;)V

    .line 59
    move-object v2, v1

    .line 60
    .end local v1    # "ss":Lfreemarker/template/SimpleSequence;
    goto :goto_4

    .line 61
    :cond_6
    instance-of v1, v2, Lfreemarker/template/TemplateSequenceModel;

    if-nez v1, :cond_8

    .line 62
    iget-object v1, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    if-eqz v1, :cond_7

    .line 63
    new-instance v1, Lfreemarker/core/NonSequenceException;

    iget-object v3, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    invoke-direct {v1, v3, v2, p1}, Lfreemarker/core/NonSequenceException;-><init>(Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)V

    throw v1

    .line 66
    :cond_7
    new-instance v1, Lfreemarker/core/_MiscTemplateException;

    const-string v3, "Expecting a sequence of namespaces after \"using\""

    invoke-direct {v1, p1, v3}, Lfreemarker/core/_MiscTemplateException;-><init>(Lfreemarker/core/Environment;Ljava/lang/String;)V

    throw v1

    .line 71
    :cond_8
    :goto_4
    move-object v1, v0

    check-cast v1, Lfreemarker/template/TemplateNodeModel;

    move-object v3, v2

    check-cast v3, Lfreemarker/template/TemplateSequenceModel;

    invoke-virtual {p1, v1, v3}, Lfreemarker/core/Environment;->recurse(Lfreemarker/template/TemplateNodeModel;Lfreemarker/template/TemplateSequenceModel;)V

    .line 72
    return-void
.end method

.method protected dump(Z)Ljava/lang/String;
    .locals 2
    .param p1, "canonical"    # Z

    .line 75
    new-instance v0, Ljava/lang/StringBuffer;

    invoke-direct {v0}, Ljava/lang/StringBuffer;-><init>()V

    .line 76
    .local v0, "sb":Ljava/lang/StringBuffer;
    if-eqz p1, :cond_0

    const/16 v1, 0x3c

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(C)Ljava/lang/StringBuffer;

    .line 77
    :cond_0
    invoke-virtual {p0}, Lfreemarker/core/RecurseNode;->getNodeTypeSymbol()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 78
    iget-object v1, p0, Lfreemarker/core/RecurseNode;->targetNode:Lfreemarker/core/Expression;

    if-eqz v1, :cond_1

    .line 79
    const/16 v1, 0x20

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(C)Ljava/lang/StringBuffer;

    .line 80
    iget-object v1, p0, Lfreemarker/core/RecurseNode;->targetNode:Lfreemarker/core/Expression;

    invoke-virtual {v1}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 82
    :cond_1
    iget-object v1, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    if-eqz v1, :cond_2

    .line 83
    const-string v1, " using "

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 84
    iget-object v1, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    invoke-virtual {v1}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 86
    :cond_2
    if-eqz p1, :cond_3

    const-string v1, "/>"

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 87
    :cond_3
    invoke-virtual {v0}, Ljava/lang/StringBuffer;->toString()Ljava/lang/String;

    move-result-object v1

    return-object v1
.end method

.method getNodeTypeSymbol()Ljava/lang/String;
    .locals 1

    .line 91
    const-string v0, "#recurse"

    return-object v0
.end method

.method getParameterCount()I
    .locals 1

    .line 95
    const/4 v0, 0x2

    return v0
.end method

.method getParameterRole(I)Lfreemarker/core/ParameterRole;
    .locals 1
    .param p1, "idx"    # I

    .line 107
    packed-switch p1, :pswitch_data_0

    .line 110
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0

    .line 109
    :pswitch_0
    sget-object v0, Lfreemarker/core/ParameterRole;->NAMESPACE:Lfreemarker/core/ParameterRole;

    return-object v0

    .line 108
    :pswitch_1
    sget-object v0, Lfreemarker/core/ParameterRole;->NODE:Lfreemarker/core/ParameterRole;

    return-object v0

    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method getParameterValue(I)Ljava/lang/Object;
    .locals 1
    .param p1, "idx"    # I

    .line 99
    packed-switch p1, :pswitch_data_0

    .line 102
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0

    .line 101
    :pswitch_0
    iget-object v0, p0, Lfreemarker/core/RecurseNode;->namespaces:Lfreemarker/core/Expression;

    return-object v0

    .line 100
    :pswitch_1
    iget-object v0, p0, Lfreemarker/core/RecurseNode;->targetNode:Lfreemarker/core/Expression;

    return-object v0

    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method isNestedBlockRepeater()Z
    .locals 1

    .line 115
    const/4 v0, 0x0

    return v0
.end method
