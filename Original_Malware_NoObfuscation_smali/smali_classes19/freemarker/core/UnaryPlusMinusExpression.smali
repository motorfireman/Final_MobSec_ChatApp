.class final Lfreemarker/core/UnaryPlusMinusExpression;
.super Lfreemarker/core/Expression;
.source "UnaryPlusMinusExpression.java"


# static fields
.field private static final MINUS_ONE:Ljava/lang/Integer;


# instance fields
.field private final TYPE_MINUS:I

.field private final TYPE_PLUS:I

.field private final isMinus:Z

.field private final target:Lfreemarker/core/Expression;


# direct methods
.method static constructor <clinit>()V
    .locals 2

    .line 31
    new-instance v0, Ljava/lang/Integer;

    const/4 v1, -0x1

    invoke-direct {v0, v1}, Ljava/lang/Integer;-><init>(I)V

    sput-object v0, Lfreemarker/core/UnaryPlusMinusExpression;->MINUS_ONE:Ljava/lang/Integer;

    return-void
.end method

.method constructor <init>(Lfreemarker/core/Expression;Z)V
    .locals 1
    .param p1, "target"    # Lfreemarker/core/Expression;
    .param p2, "isMinus"    # Z

    .line 33
    invoke-direct {p0}, Lfreemarker/core/Expression;-><init>()V

    .line 26
    const/4 v0, 0x0

    iput v0, p0, Lfreemarker/core/UnaryPlusMinusExpression;->TYPE_MINUS:I

    .line 27
    const/4 v0, 0x1

    iput v0, p0, Lfreemarker/core/UnaryPlusMinusExpression;->TYPE_PLUS:I

    .line 34
    iput-object p1, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    .line 35
    iput-boolean p2, p0, Lfreemarker/core/UnaryPlusMinusExpression;->isMinus:Z

    .line 36
    return-void
.end method


# virtual methods
.method _eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;
    .locals 5
    .param p1, "env"    # Lfreemarker/core/Environment;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;
        }
    .end annotation

    .line 39
    const/4 v0, 0x0

    .line 40
    .local v0, "targetModel":Lfreemarker/template/TemplateNumberModel;
    iget-object v1, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    invoke-virtual {v1, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v1

    .line 42
    .local v1, "tm":Lfreemarker/template/TemplateModel;
    :try_start_0
    move-object v2, v1

    check-cast v2, Lfreemarker/template/TemplateNumberModel;
    :try_end_0
    .catch Ljava/lang/ClassCastException; {:try_start_0 .. :try_end_0} :catch_0

    move-object v0, v2

    .line 45
    nop

    .line 46
    iget-boolean v2, p0, Lfreemarker/core/UnaryPlusMinusExpression;->isMinus:Z

    if-nez v2, :cond_0

    .line 47
    return-object v0

    .line 49
    :cond_0
    iget-object v2, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    invoke-virtual {v2, v0, p1}, Lfreemarker/core/Expression;->assertNonNull(Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)V

    .line 50
    invoke-interface {v0}, Lfreemarker/template/TemplateNumberModel;->getAsNumber()Ljava/lang/Number;

    move-result-object v2

    .line 51
    .local v2, "n":Ljava/lang/Number;
    sget-object v3, Lfreemarker/core/ArithmeticEngine;->CONSERVATIVE_ENGINE:Lfreemarker/core/ArithmeticEngine$ConservativeEngine;

    sget-object v4, Lfreemarker/core/UnaryPlusMinusExpression;->MINUS_ONE:Ljava/lang/Integer;

    invoke-virtual {v3, v4, v2}, Lfreemarker/core/ArithmeticEngine$ConservativeEngine;->multiply(Ljava/lang/Number;Ljava/lang/Number;)Ljava/lang/Number;

    move-result-object v2

    .line 52
    new-instance v3, Lfreemarker/template/SimpleNumber;

    invoke-direct {v3, v2}, Lfreemarker/template/SimpleNumber;-><init>(Ljava/lang/Number;)V

    return-object v3

    .line 43
    .end local v2    # "n":Ljava/lang/Number;
    :catch_0
    move-exception v2

    .line 44
    .local v2, "cce":Ljava/lang/ClassCastException;
    new-instance v3, Lfreemarker/core/NonNumericalException;

    iget-object v4, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    invoke-direct {v3, v4, v1, p1}, Lfreemarker/core/NonNumericalException;-><init>(Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)V

    throw v3
.end method

.method protected deepCloneWithIdentifierReplaced_inner(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;
    .locals 3
    .param p1, "replacedIdentifier"    # Ljava/lang/String;
    .param p2, "replacement"    # Lfreemarker/core/Expression;
    .param p3, "replacementState"    # Lfreemarker/core/Expression$ReplacemenetState;

    .line 70
    new-instance v0, Lfreemarker/core/UnaryPlusMinusExpression;

    iget-object v1, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    .line 71
    invoke-virtual {v1, p1, p2, p3}, Lfreemarker/core/Expression;->deepCloneWithIdentifierReplaced(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;

    move-result-object v1

    iget-boolean v2, p0, Lfreemarker/core/UnaryPlusMinusExpression;->isMinus:Z

    invoke-direct {v0, v1, v2}, Lfreemarker/core/UnaryPlusMinusExpression;-><init>(Lfreemarker/core/Expression;Z)V

    return-object v0
.end method

.method public getCanonicalForm()Ljava/lang/String;
    .locals 3

    .line 56
    iget-boolean v0, p0, Lfreemarker/core/UnaryPlusMinusExpression;->isMinus:Z

    if-eqz v0, :cond_0

    const-string v0, "-"

    goto :goto_0

    :cond_0
    const-string v0, "+"

    .line 57
    .local v0, "op":Ljava/lang/String;
    :goto_0
    new-instance v1, Ljava/lang/StringBuffer;

    invoke-direct {v1}, Ljava/lang/StringBuffer;-><init>()V

    invoke-virtual {v1, v0}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v1

    iget-object v2, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    invoke-virtual {v2}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v1, v2}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuffer;->toString()Ljava/lang/String;

    move-result-object v1

    return-object v1
.end method

.method getNodeTypeSymbol()Ljava/lang/String;
    .locals 1

    .line 61
    iget-boolean v0, p0, Lfreemarker/core/UnaryPlusMinusExpression;->isMinus:Z

    if-eqz v0, :cond_0

    const-string v0, "-..."

    goto :goto_0

    :cond_0
    const-string v0, "+..."

    :goto_0
    return-object v0
.end method

.method getParameterCount()I
    .locals 1

    .line 76
    const/4 v0, 0x2

    return v0
.end method

.method getParameterRole(I)Lfreemarker/core/ParameterRole;
    .locals 1
    .param p1, "idx"    # I

    .line 88
    packed-switch p1, :pswitch_data_0

    .line 91
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0

    .line 90
    :pswitch_0
    sget-object v0, Lfreemarker/core/ParameterRole;->AST_NODE_SUBTYPE:Lfreemarker/core/ParameterRole;

    return-object v0

    .line 89
    :pswitch_1
    sget-object v0, Lfreemarker/core/ParameterRole;->RIGHT_HAND_OPERAND:Lfreemarker/core/ParameterRole;

    return-object v0

    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method getParameterValue(I)Ljava/lang/Object;
    .locals 2
    .param p1, "idx"    # I

    .line 80
    packed-switch p1, :pswitch_data_0

    .line 83
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0

    .line 82
    :pswitch_0
    new-instance v0, Ljava/lang/Integer;

    iget-boolean v1, p0, Lfreemarker/core/UnaryPlusMinusExpression;->isMinus:Z

    xor-int/lit8 v1, v1, 0x1

    invoke-direct {v0, v1}, Ljava/lang/Integer;-><init>(I)V

    return-object v0

    .line 81
    :pswitch_1
    iget-object v0, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    return-object v0

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method isLiteral()Z
    .locals 1

    .line 65
    iget-object v0, p0, Lfreemarker/core/UnaryPlusMinusExpression;->target:Lfreemarker/core/Expression;

    invoke-virtual {v0}, Lfreemarker/core/Expression;->isLiteral()Z

    move-result v0

    return v0
.end method
