.class final Lfreemarker/core/Include;
.super Lfreemarker/core/TemplateElement;
.source "Include.java"


# instance fields
.field private final encoding:Ljava/lang/String;

.field private final encodingExp:Lfreemarker/core/Expression;

.field private final ignoreMissingExp:Lfreemarker/core/Expression;

.field private final ignoreMissingExpPrecalcedValue:Ljava/lang/Boolean;

.field private final includedTemplateNameExp:Lfreemarker/core/Expression;

.field private final parse:Ljava/lang/Boolean;

.field private final parseExp:Lfreemarker/core/Expression;


# direct methods
.method constructor <init>(Lfreemarker/template/Template;Lfreemarker/core/Expression;Lfreemarker/core/Expression;Lfreemarker/core/Expression;Lfreemarker/core/Expression;)V
    .locals 3
    .param p1, "template"    # Lfreemarker/template/Template;
    .param p2, "includedTemplatePathExp"    # Lfreemarker/core/Expression;
    .param p3, "encodingExp"    # Lfreemarker/core/Expression;
    .param p4, "parseExp"    # Lfreemarker/core/Expression;
    .param p5, "ignoreMissingExp"    # Lfreemarker/core/Expression;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/core/ParseException;
        }
    .end annotation

    .line 48
    invoke-direct {p0}, Lfreemarker/core/TemplateElement;-><init>()V

    .line 49
    iput-object p2, p0, Lfreemarker/core/Include;->includedTemplateNameExp:Lfreemarker/core/Expression;

    .line 51
    iput-object p3, p0, Lfreemarker/core/Include;->encodingExp:Lfreemarker/core/Expression;

    .line 52
    const/4 v0, 0x0

    if-nez p3, :cond_0

    .line 53
    iput-object v0, p0, Lfreemarker/core/Include;->encoding:Ljava/lang/String;

    goto :goto_0

    .line 55
    :cond_0
    invoke-virtual {p3}, Lfreemarker/core/Expression;->isLiteral()Z

    move-result v1

    if-eqz v1, :cond_2

    .line 57
    :try_start_0
    invoke-virtual {p3, v0}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v1

    .line 58
    .local v1, "tm":Lfreemarker/template/TemplateModel;
    instance-of v2, v1, Lfreemarker/template/TemplateScalarModel;

    if-eqz v2, :cond_1

    .line 62
    move-object v2, v1

    check-cast v2, Lfreemarker/template/TemplateScalarModel;

    invoke-interface {v2}, Lfreemarker/template/TemplateScalarModel;->getAsString()Ljava/lang/String;

    move-result-object v2

    iput-object v2, p0, Lfreemarker/core/Include;->encoding:Ljava/lang/String;

    .line 66
    .end local v1    # "tm":Lfreemarker/template/TemplateModel;
    goto :goto_0

    .line 59
    .restart local v1    # "tm":Lfreemarker/template/TemplateModel;
    :cond_1
    new-instance v0, Lfreemarker/core/ParseException;

    const-string v2, "Expected a string as the value of the \"encoding\" argument"

    invoke-direct {v0, v2, p3}, Lfreemarker/core/ParseException;-><init>(Ljava/lang/String;Lfreemarker/core/TemplateObject;)V

    .end local p1    # "template":Lfreemarker/template/Template;
    .end local p2    # "includedTemplatePathExp":Lfreemarker/core/Expression;
    .end local p3    # "encodingExp":Lfreemarker/core/Expression;
    .end local p4    # "parseExp":Lfreemarker/core/Expression;
    .end local p5    # "ignoreMissingExp":Lfreemarker/core/Expression;
    throw v0
    :try_end_0
    .catch Lfreemarker/template/TemplateException; {:try_start_0 .. :try_end_0} :catch_0

    .line 63
    .end local v1    # "tm":Lfreemarker/template/TemplateModel;
    .restart local p1    # "template":Lfreemarker/template/Template;
    .restart local p2    # "includedTemplatePathExp":Lfreemarker/core/Expression;
    .restart local p3    # "encodingExp":Lfreemarker/core/Expression;
    .restart local p4    # "parseExp":Lfreemarker/core/Expression;
    .restart local p5    # "ignoreMissingExp":Lfreemarker/core/Expression;
    :catch_0
    move-exception v0

    .line 65
    .local v0, "e":Lfreemarker/template/TemplateException;
    new-instance v1, Lfreemarker/core/BugException;

    invoke-direct {v1, v0}, Lfreemarker/core/BugException;-><init>(Ljava/lang/Throwable;)V

    throw v1

    .line 68
    .end local v0    # "e":Lfreemarker/template/TemplateException;
    :cond_2
    iput-object v0, p0, Lfreemarker/core/Include;->encoding:Ljava/lang/String;

    .line 72
    :goto_0
    iput-object p4, p0, Lfreemarker/core/Include;->parseExp:Lfreemarker/core/Expression;

    .line 73
    if-nez p4, :cond_3

    .line 74
    sget-object v1, Ljava/lang/Boolean;->TRUE:Ljava/lang/Boolean;

    iput-object v1, p0, Lfreemarker/core/Include;->parse:Ljava/lang/Boolean;

    goto :goto_2

    .line 76
    :cond_3
    invoke-virtual {p4}, Lfreemarker/core/Expression;->isLiteral()Z

    move-result v1

    if-eqz v1, :cond_5

    .line 78
    :try_start_1
    instance-of v1, p4, Lfreemarker/core/StringLiteral;

    if-eqz v1, :cond_4

    .line 80
    invoke-virtual {p4, v0}, Lfreemarker/core/Expression;->evalAndCoerceToString(Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v1

    invoke-static {v1}, Lfreemarker/template/utility/StringUtil;->getYesNo(Ljava/lang/String;)Z

    move-result v1

    invoke-static {v1}, Ljava/lang/Boolean;->valueOf(Z)Ljava/lang/Boolean;

    move-result-object v1

    iput-object v1, p0, Lfreemarker/core/Include;->parse:Ljava/lang/Boolean;
    :try_end_1
    .catch Lfreemarker/template/TemplateException; {:try_start_1 .. :try_end_1} :catch_2

    goto :goto_1

    .line 83
    :cond_4
    :try_start_2
    invoke-virtual {p1}, Lfreemarker/template/Template;->getConfiguration()Lfreemarker/template/Configuration;

    move-result-object v1

    invoke-virtual {p4, v1}, Lfreemarker/core/Expression;->evalToBoolean(Lfreemarker/template/Configuration;)Z

    move-result v1

    invoke-static {v1}, Ljava/lang/Boolean;->valueOf(Z)Ljava/lang/Boolean;

    move-result-object v1

    iput-object v1, p0, Lfreemarker/core/Include;->parse:Ljava/lang/Boolean;
    :try_end_2
    .catch Lfreemarker/core/NonBooleanException; {:try_start_2 .. :try_end_2} :catch_1
    .catch Lfreemarker/template/TemplateException; {:try_start_2 .. :try_end_2} :catch_2

    .line 87
    nop

    .line 92
    :goto_1
    goto :goto_2

    .line 84
    :catch_1
    move-exception v0

    .line 85
    .local v0, "e":Lfreemarker/core/NonBooleanException;
    :try_start_3
    new-instance v1, Lfreemarker/core/ParseException;

    const-string v2, "Expected a boolean or string as the value of the parse attribute"

    invoke-direct {v1, v2, p4, v0}, Lfreemarker/core/ParseException;-><init>(Ljava/lang/String;Lfreemarker/core/TemplateObject;Ljava/lang/Throwable;)V

    .end local p1    # "template":Lfreemarker/template/Template;
    .end local p2    # "includedTemplatePathExp":Lfreemarker/core/Expression;
    .end local p3    # "encodingExp":Lfreemarker/core/Expression;
    .end local p4    # "parseExp":Lfreemarker/core/Expression;
    .end local p5    # "ignoreMissingExp":Lfreemarker/core/Expression;
    throw v1
    :try_end_3
    .catch Lfreemarker/template/TemplateException; {:try_start_3 .. :try_end_3} :catch_2

    .line 89
    .end local v0    # "e":Lfreemarker/core/NonBooleanException;
    .restart local p1    # "template":Lfreemarker/template/Template;
    .restart local p2    # "includedTemplatePathExp":Lfreemarker/core/Expression;
    .restart local p3    # "encodingExp":Lfreemarker/core/Expression;
    .restart local p4    # "parseExp":Lfreemarker/core/Expression;
    .restart local p5    # "ignoreMissingExp":Lfreemarker/core/Expression;
    :catch_2
    move-exception v0

    .line 91
    .local v0, "e":Lfreemarker/template/TemplateException;
    new-instance v1, Lfreemarker/core/BugException;

    invoke-direct {v1, v0}, Lfreemarker/core/BugException;-><init>(Ljava/lang/Throwable;)V

    throw v1

    .line 94
    .end local v0    # "e":Lfreemarker/template/TemplateException;
    :cond_5
    iput-object v0, p0, Lfreemarker/core/Include;->parse:Ljava/lang/Boolean;

    .line 98
    :goto_2
    iput-object p5, p0, Lfreemarker/core/Include;->ignoreMissingExp:Lfreemarker/core/Expression;

    .line 99
    if-eqz p5, :cond_6

    invoke-virtual {p5}, Lfreemarker/core/Expression;->isLiteral()Z

    move-result v1

    if-eqz v1, :cond_6

    .line 102
    nop

    .line 103
    :try_start_4
    invoke-virtual {p1}, Lfreemarker/template/Template;->getConfiguration()Lfreemarker/template/Configuration;

    move-result-object v0

    invoke-virtual {p5, v0}, Lfreemarker/core/Expression;->evalToBoolean(Lfreemarker/template/Configuration;)Z

    move-result v0

    .line 102
    invoke-static {v0}, Ljava/lang/Boolean;->valueOf(Z)Ljava/lang/Boolean;

    move-result-object v0

    iput-object v0, p0, Lfreemarker/core/Include;->ignoreMissingExpPrecalcedValue:Ljava/lang/Boolean;
    :try_end_4
    .catch Lfreemarker/core/NonBooleanException; {:try_start_4 .. :try_end_4} :catch_4
    .catch Lfreemarker/template/TemplateException; {:try_start_4 .. :try_end_4} :catch_3

    .line 107
    nop

    .line 111
    goto :goto_4

    .line 108
    :catch_3
    move-exception v0

    goto :goto_3

    .line 104
    :catch_4
    move-exception v0

    .line 105
    .local v0, "e":Lfreemarker/core/NonBooleanException;
    :try_start_5
    new-instance v1, Lfreemarker/core/ParseException;

    const-string v2, "Expected a boolean as the value of the \"ignore_missing\" attribute"

    invoke-direct {v1, v2, p5, v0}, Lfreemarker/core/ParseException;-><init>(Ljava/lang/String;Lfreemarker/core/TemplateObject;Ljava/lang/Throwable;)V

    .end local p1    # "template":Lfreemarker/template/Template;
    .end local p2    # "includedTemplatePathExp":Lfreemarker/core/Expression;
    .end local p3    # "encodingExp":Lfreemarker/core/Expression;
    .end local p4    # "parseExp":Lfreemarker/core/Expression;
    .end local p5    # "ignoreMissingExp":Lfreemarker/core/Expression;
    throw v1
    :try_end_5
    .catch Lfreemarker/template/TemplateException; {:try_start_5 .. :try_end_5} :catch_3

    .line 110
    .local v0, "e":Lfreemarker/template/TemplateException;
    .restart local p1    # "template":Lfreemarker/template/Template;
    .restart local p2    # "includedTemplatePathExp":Lfreemarker/core/Expression;
    .restart local p3    # "encodingExp":Lfreemarker/core/Expression;
    .restart local p4    # "parseExp":Lfreemarker/core/Expression;
    .restart local p5    # "ignoreMissingExp":Lfreemarker/core/Expression;
    :goto_3
    new-instance v1, Lfreemarker/core/BugException;

    invoke-direct {v1, v0}, Lfreemarker/core/BugException;-><init>(Ljava/lang/Throwable;)V

    throw v1

    .line 113
    .end local v0    # "e":Lfreemarker/template/TemplateException;
    :cond_6
    iput-object v0, p0, Lfreemarker/core/Include;->ignoreMissingExpPrecalcedValue:Ljava/lang/Boolean;

    .line 115
    :goto_4
    return-void
.end method

.method private getYesNo(Lfreemarker/core/Expression;Ljava/lang/String;)Z
    .locals 5
    .param p1, "exp"    # Lfreemarker/core/Expression;
    .param p2, "s"    # Ljava/lang/String;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;
        }
    .end annotation

    .line 224
    :try_start_0
    invoke-static {p2}, Lfreemarker/template/utility/StringUtil;->getYesNo(Ljava/lang/String;)Z

    move-result v0
    :try_end_0
    .catch Ljava/lang/IllegalArgumentException; {:try_start_0 .. :try_end_0} :catch_0

    return v0

    .line 226
    :catch_0
    move-exception v0

    .line 227
    .local v0, "iae":Ljava/lang/IllegalArgumentException;
    new-instance v1, Lfreemarker/core/_MiscTemplateException;

    const/4 v2, 0x3

    new-array v2, v2, [Ljava/lang/Object;

    const/4 v3, 0x0

    const-string v4, "Value must be boolean (or one of these strings: \"n\", \"no\", \"f\", \"false\", \"y\", \"yes\", \"t\", \"true\"), but it was "

    aput-object v4, v2, v3

    const/4 v3, 0x1

    new-instance v4, Lfreemarker/core/_DelayedJQuote;

    invoke-direct {v4, p2}, Lfreemarker/core/_DelayedJQuote;-><init>(Ljava/lang/Object;)V

    aput-object v4, v2, v3

    const/4 v3, 0x2

    const-string v4, "."

    aput-object v4, v2, v3

    invoke-direct {v1, p1, v2}, Lfreemarker/core/_MiscTemplateException;-><init>(Lfreemarker/core/Expression;[Ljava/lang/Object;)V

    throw v1
.end method


# virtual methods
.method accept(Lfreemarker/core/Environment;)V
    .locals 13
    .param p1, "env"    # Lfreemarker/core/Environment;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;,
            Ljava/io/IOException;
        }
    .end annotation

    .line 118
    iget-object v0, p0, Lfreemarker/core/Include;->includedTemplateNameExp:Lfreemarker/core/Expression;

    invoke-virtual {v0, p1}, Lfreemarker/core/Expression;->evalAndCoerceToString(Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v0

    .line 121
    .local v0, "includedTemplateName":Ljava/lang/String;
    const/4 v1, 0x3

    const/4 v2, 0x2

    const/4 v3, 0x1

    const/4 v4, 0x0

    const/4 v5, 0x4

    :try_start_0
    invoke-virtual {p0}, Lfreemarker/core/Include;->getTemplate()Lfreemarker/template/Template;

    move-result-object v6

    invoke-virtual {v6}, Lfreemarker/template/Template;->getName()Ljava/lang/String;

    move-result-object v6

    invoke-virtual {p1, v6, v0}, Lfreemarker/core/Environment;->toFullTemplateName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v6
    :try_end_0
    .catch Lfreemarker/template/MalformedTemplateNameException; {:try_start_0 .. :try_end_0} :catch_1

    .line 126
    .local v6, "fullIncludedTemplateName":Ljava/lang/String;
    nop

    .line 128
    iget-object v7, p0, Lfreemarker/core/Include;->encoding:Ljava/lang/String;

    if-eqz v7, :cond_0

    goto :goto_0

    :cond_0
    iget-object v7, p0, Lfreemarker/core/Include;->encodingExp:Lfreemarker/core/Expression;

    if-eqz v7, :cond_1

    .line 131
    invoke-virtual {v7, p1}, Lfreemarker/core/Expression;->evalAndCoerceToString(Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v7

    goto :goto_0

    :cond_1
    const/4 v7, 0x0

    :goto_0
    nop

    .line 135
    .local v7, "encoding":Ljava/lang/String;
    iget-object v8, p0, Lfreemarker/core/Include;->parse:Ljava/lang/Boolean;

    if-eqz v8, :cond_2

    .line 136
    invoke-virtual {v8}, Ljava/lang/Boolean;->booleanValue()Z

    move-result v8

    .local v8, "parse":Z
    goto :goto_1

    .line 138
    .end local v8    # "parse":Z
    :cond_2
    iget-object v8, p0, Lfreemarker/core/Include;->parseExp:Lfreemarker/core/Expression;

    invoke-virtual {v8, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v8

    .line 139
    .local v8, "tm":Lfreemarker/template/TemplateModel;
    instance-of v9, v8, Lfreemarker/template/TemplateScalarModel;

    if-eqz v9, :cond_3

    .line 141
    iget-object v9, p0, Lfreemarker/core/Include;->parseExp:Lfreemarker/core/Expression;

    move-object v10, v8

    check-cast v10, Lfreemarker/template/TemplateScalarModel;

    invoke-static {v10, v9, p1}, Lfreemarker/core/EvalUtil;->modelToString(Lfreemarker/template/TemplateScalarModel;Lfreemarker/core/Expression;Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v10

    invoke-direct {p0, v9, v10}, Lfreemarker/core/Include;->getYesNo(Lfreemarker/core/Expression;Ljava/lang/String;)Z

    move-result v9

    move v8, v9

    .local v9, "parse":Z
    goto :goto_1

    .line 143
    .end local v9    # "parse":Z
    :cond_3
    iget-object v9, p0, Lfreemarker/core/Include;->parseExp:Lfreemarker/core/Expression;

    invoke-virtual {v9, v8, p1}, Lfreemarker/core/Expression;->modelToBoolean(Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)Z

    move-result v9

    move v8, v9

    .line 148
    .local v8, "parse":Z
    :goto_1
    iget-object v9, p0, Lfreemarker/core/Include;->ignoreMissingExpPrecalcedValue:Ljava/lang/Boolean;

    if-eqz v9, :cond_4

    .line 149
    invoke-virtual {v9}, Ljava/lang/Boolean;->booleanValue()Z

    move-result v9

    .local v9, "ignoreMissing":Z
    goto :goto_2

    .line 150
    .end local v9    # "ignoreMissing":Z
    :cond_4
    iget-object v9, p0, Lfreemarker/core/Include;->ignoreMissingExp:Lfreemarker/core/Expression;

    if-eqz v9, :cond_5

    .line 151
    invoke-virtual {v9, p1}, Lfreemarker/core/Expression;->evalToBoolean(Lfreemarker/core/Environment;)Z

    move-result v9

    .restart local v9    # "ignoreMissing":Z
    goto :goto_2

    .line 153
    .end local v9    # "ignoreMissing":Z
    :cond_5
    const/4 v9, 0x0

    .line 158
    .restart local v9    # "ignoreMissing":Z
    :goto_2
    :try_start_1
    invoke-virtual {p1, v6, v7, v8, v9}, Lfreemarker/core/Environment;->getTemplateForInclusion(Ljava/lang/String;Ljava/lang/String;ZZ)Lfreemarker/template/Template;

    move-result-object v1
    :try_end_1
    .catch Ljava/io/IOException; {:try_start_1 .. :try_end_1} :catch_0

    .line 164
    .local v1, "includedTemplate":Lfreemarker/template/Template;
    nop

    .line 166
    if-eqz v1, :cond_6

    .line 167
    invoke-virtual {p1, v1}, Lfreemarker/core/Environment;->include(Lfreemarker/template/Template;)V

    .line 169
    :cond_6
    return-void

    .line 159
    .end local v1    # "includedTemplate":Lfreemarker/template/Template;
    :catch_0
    move-exception v10

    .line 160
    .local v10, "e":Ljava/io/IOException;
    new-instance v11, Lfreemarker/core/_MiscTemplateException;

    new-array v5, v5, [Ljava/lang/Object;

    const-string v12, "Template inclusion failed (for parameter value "

    aput-object v12, v5, v4

    new-instance v4, Lfreemarker/core/_DelayedJQuote;

    invoke-direct {v4, v0}, Lfreemarker/core/_DelayedJQuote;-><init>(Ljava/lang/Object;)V

    aput-object v4, v5, v3

    const-string v3, "):\n"

    aput-object v3, v5, v2

    new-instance v2, Lfreemarker/core/_DelayedGetMessage;

    invoke-direct {v2, v10}, Lfreemarker/core/_DelayedGetMessage;-><init>(Ljava/lang/Throwable;)V

    aput-object v2, v5, v1

    invoke-direct {v11, v10, p1, v5}, Lfreemarker/core/_MiscTemplateException;-><init>(Ljava/lang/Throwable;Lfreemarker/core/Environment;[Ljava/lang/Object;)V

    throw v11

    .line 122
    .end local v6    # "fullIncludedTemplateName":Ljava/lang/String;
    .end local v7    # "encoding":Ljava/lang/String;
    .end local v8    # "parse":Z
    .end local v9    # "ignoreMissing":Z
    .end local v10    # "e":Ljava/io/IOException;
    :catch_1
    move-exception v6

    .line 123
    .local v6, "e":Lfreemarker/template/MalformedTemplateNameException;
    new-instance v7, Lfreemarker/core/_MiscTemplateException;

    new-array v5, v5, [Ljava/lang/Object;

    const-string v8, "Malformed template name "

    aput-object v8, v5, v4

    new-instance v4, Lfreemarker/core/_DelayedJQuote;

    .line 124
    invoke-virtual {v6}, Lfreemarker/template/MalformedTemplateNameException;->getTemplateName()Ljava/lang/String;

    move-result-object v8

    invoke-direct {v4, v8}, Lfreemarker/core/_DelayedJQuote;-><init>(Ljava/lang/Object;)V

    aput-object v4, v5, v3

    const-string v3, ":\n"

    aput-object v3, v5, v2

    .line 125
    invoke-virtual {v6}, Lfreemarker/template/MalformedTemplateNameException;->getMalformednessDescription()Ljava/lang/String;

    move-result-object v2

    aput-object v2, v5, v1

    invoke-direct {v7, v6, p1, v5}, Lfreemarker/core/_MiscTemplateException;-><init>(Ljava/lang/Throwable;Lfreemarker/core/Environment;[Ljava/lang/Object;)V

    throw v7
.end method

.method protected dump(Z)Ljava/lang/String;
    .locals 3
    .param p1, "canonical"    # Z

    .line 172
    new-instance v0, Ljava/lang/StringBuffer;

    invoke-direct {v0}, Ljava/lang/StringBuffer;-><init>()V

    .line 173
    .local v0, "buf":Ljava/lang/StringBuffer;
    if-eqz p1, :cond_0

    const/16 v1, 0x3c

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(C)Ljava/lang/StringBuffer;

    .line 174
    :cond_0
    invoke-virtual {p0}, Lfreemarker/core/Include;->getNodeTypeSymbol()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 175
    const/16 v1, 0x20

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(C)Ljava/lang/StringBuffer;

    .line 176
    iget-object v1, p0, Lfreemarker/core/Include;->includedTemplateNameExp:Lfreemarker/core/Expression;

    invoke-virtual {v1}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 177
    iget-object v1, p0, Lfreemarker/core/Include;->encodingExp:Lfreemarker/core/Expression;

    if-eqz v1, :cond_1

    .line 178
    const-string v1, " encoding="

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v1

    iget-object v2, p0, Lfreemarker/core/Include;->encodingExp:Lfreemarker/core/Expression;

    invoke-virtual {v2}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v1, v2}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 180
    :cond_1
    iget-object v1, p0, Lfreemarker/core/Include;->parseExp:Lfreemarker/core/Expression;

    if-eqz v1, :cond_2

    .line 181
    const-string v1, " parse="

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v1

    iget-object v2, p0, Lfreemarker/core/Include;->parseExp:Lfreemarker/core/Expression;

    invoke-virtual {v2}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v1, v2}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 183
    :cond_2
    iget-object v1, p0, Lfreemarker/core/Include;->ignoreMissingExp:Lfreemarker/core/Expression;

    if-eqz v1, :cond_3

    .line 184
    const-string v1, " ignore_missing="

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v1

    iget-object v2, p0, Lfreemarker/core/Include;->ignoreMissingExp:Lfreemarker/core/Expression;

    invoke-virtual {v2}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v1, v2}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 186
    :cond_3
    if-eqz p1, :cond_4

    const-string v1, "/>"

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    .line 187
    :cond_4
    invoke-virtual {v0}, Ljava/lang/StringBuffer;->toString()Ljava/lang/String;

    move-result-object v1

    return-object v1
.end method

.method getNodeTypeSymbol()Ljava/lang/String;
    .locals 1

    .line 191
    const-string v0, "#include"

    return-object v0
.end method

.method getParameterCount()I
    .locals 1

    .line 195
    const/4 v0, 0x3

    return v0
.end method

.method getParameterRole(I)Lfreemarker/core/ParameterRole;
    .locals 1
    .param p1, "idx"    # I

    .line 209
    packed-switch p1, :pswitch_data_0

    .line 214
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0

    .line 213
    :pswitch_0
    sget-object v0, Lfreemarker/core/ParameterRole;->IGNORE_MISSING_PARAMETER:Lfreemarker/core/ParameterRole;

    return-object v0

    .line 212
    :pswitch_1
    sget-object v0, Lfreemarker/core/ParameterRole;->ENCODING_PARAMETER:Lfreemarker/core/ParameterRole;

    return-object v0

    .line 211
    :pswitch_2
    sget-object v0, Lfreemarker/core/ParameterRole;->PARSE_PARAMETER:Lfreemarker/core/ParameterRole;

    return-object v0

    .line 210
    :pswitch_3
    sget-object v0, Lfreemarker/core/ParameterRole;->TEMPLATE_NAME:Lfreemarker/core/ParameterRole;

    return-object v0

    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_3
        :pswitch_2
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method getParameterValue(I)Ljava/lang/Object;
    .locals 1
    .param p1, "idx"    # I

    .line 199
    packed-switch p1, :pswitch_data_0

    .line 204
    new-instance v0, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {v0}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw v0

    .line 203
    :pswitch_0
    iget-object v0, p0, Lfreemarker/core/Include;->ignoreMissingExp:Lfreemarker/core/Expression;

    return-object v0

    .line 202
    :pswitch_1
    iget-object v0, p0, Lfreemarker/core/Include;->encodingExp:Lfreemarker/core/Expression;

    return-object v0

    .line 201
    :pswitch_2
    iget-object v0, p0, Lfreemarker/core/Include;->parseExp:Lfreemarker/core/Expression;

    return-object v0

    .line 200
    :pswitch_3
    iget-object v0, p0, Lfreemarker/core/Include;->includedTemplateNameExp:Lfreemarker/core/Expression;

    return-object v0

    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_3
        :pswitch_2
        :pswitch_1
        :pswitch_0
    .end packed-switch
.end method

.method isNestedBlockRepeater()Z
    .locals 1

    .line 219
    const/4 v0, 0x0

    return v0
.end method
