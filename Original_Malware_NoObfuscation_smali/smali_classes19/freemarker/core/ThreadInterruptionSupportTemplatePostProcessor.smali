.class Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor;
.super Lfreemarker/core/TemplatePostProcessor;
.source "ThreadInterruptionSupportTemplatePostProcessor.java"


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor$TemplateProcessingThreadInterruptedException;,
        Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor$ThreadInterruptionCheck;
    }
.end annotation


# direct methods
.method constructor <init>()V
    .locals 0

    .line 45
    invoke-direct {p0}, Lfreemarker/core/TemplatePostProcessor;-><init>()V

    .line 148
    return-void
.end method

.method private addInterruptionChecks(Lfreemarker/core/TemplateElement;)V
    .locals 10
    .param p1, "te"    # Lfreemarker/core/TemplateElement;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/core/TemplatePostProcessorException;
        }
    .end annotation

    .line 53
    if-nez p1, :cond_0

    .line 54
    return-void

    .line 57
    :cond_0
    invoke-virtual {p1}, Lfreemarker/core/TemplateElement;->getNestedBlock()Lfreemarker/core/TemplateElement;

    move-result-object v0

    .line 60
    .local v0, "nestedBlock":Lfreemarker/core/TemplateElement;
    if-eqz v0, :cond_1

    .line 61
    invoke-direct {p0, v0}, Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor;->addInterruptionChecks(Lfreemarker/core/TemplateElement;)V

    .line 63
    :cond_1
    invoke-virtual {p1}, Lfreemarker/core/TemplateElement;->getRegulatedChildCount()I

    move-result v1

    .line 64
    .local v1, "regulatedChildrenCount":I
    const/4 v2, 0x0

    .local v2, "i":I
    :goto_0
    if-ge v2, v1, :cond_2

    .line 65
    invoke-virtual {p1, v2}, Lfreemarker/core/TemplateElement;->getRegulatedChild(I)Lfreemarker/core/TemplateElement;

    move-result-object v3

    invoke-direct {p0, v3}, Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor;->addInterruptionChecks(Lfreemarker/core/TemplateElement;)V

    .line 64
    add-int/lit8 v2, v2, 0x1

    goto :goto_0

    .line 70
    .end local v2    # "i":I
    :cond_2
    invoke-virtual {p1}, Lfreemarker/core/TemplateElement;->isNestedBlockRepeater()Z

    move-result v2

    if-eqz v2, :cond_6

    .line 71
    if-nez v1, :cond_5

    .line 77
    :try_start_0
    new-instance v2, Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor$ThreadInterruptionCheck;

    const/4 v3, 0x0

    invoke-direct {v2, p1, v3}, Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor$ThreadInterruptionCheck;-><init>(Lfreemarker/core/TemplateElement;Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor$1;)V

    .line 78
    .local v2, "interruptedChk":Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor$ThreadInterruptionCheck;
    if-nez v0, :cond_3

    .line 79
    invoke-virtual {p1, v2}, Lfreemarker/core/TemplateElement;->setNestedBlock(Lfreemarker/core/TemplateElement;)V

    goto :goto_2

    .line 82
    :cond_3
    instance-of v3, v0, Lfreemarker/core/MixedContent;

    if-eqz v3, :cond_4

    .line 83
    move-object v3, v0

    check-cast v3, Lfreemarker/core/MixedContent;

    .local v3, "nestedMixedC":Lfreemarker/core/MixedContent;
    goto :goto_1

    .line 85
    .end local v3    # "nestedMixedC":Lfreemarker/core/MixedContent;
    :cond_4
    new-instance v3, Lfreemarker/core/MixedContent;

    invoke-direct {v3}, Lfreemarker/core/MixedContent;-><init>()V

    .line 86
    .restart local v3    # "nestedMixedC":Lfreemarker/core/MixedContent;
    invoke-virtual {p1}, Lfreemarker/core/TemplateElement;->getTemplate()Lfreemarker/template/Template;

    move-result-object v5

    const/4 v6, 0x0

    const/4 v7, 0x0

    const/4 v8, 0x0

    const/4 v9, 0x0

    move-object v4, v3

    invoke-virtual/range {v4 .. v9}, Lfreemarker/core/MixedContent;->setLocation(Lfreemarker/template/Template;IIII)V

    .line 87
    invoke-virtual {v3, v0}, Lfreemarker/core/MixedContent;->addElement(Lfreemarker/core/TemplateElement;)V

    .line 88
    invoke-virtual {p1, v3}, Lfreemarker/core/TemplateElement;->setNestedBlock(Lfreemarker/core/TemplateElement;)V

    .line 90
    :goto_1
    const/4 v4, 0x0

    invoke-virtual {v3, v4, v2}, Lfreemarker/core/MixedContent;->addElement(ILfreemarker/core/TemplateElement;)V
    :try_end_0
    .catch Lfreemarker/core/ParseException; {:try_start_0 .. :try_end_0} :catch_0

    .line 94
    .end local v2    # "interruptedChk":Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor$ThreadInterruptionCheck;
    .end local v3    # "nestedMixedC":Lfreemarker/core/MixedContent;
    :goto_2
    goto :goto_3

    .line 92
    :catch_0
    move-exception v2

    .line 93
    .local v2, "e":Lfreemarker/core/ParseException;
    new-instance v3, Lfreemarker/core/TemplatePostProcessorException;

    const-string v4, "Unexpected error; see cause"

    invoke-direct {v3, v4, v2}, Lfreemarker/core/TemplatePostProcessorException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)V

    throw v3

    .line 74
    .end local v2    # "e":Lfreemarker/core/ParseException;
    :cond_5
    new-instance v2, Lfreemarker/core/BugException;

    invoke-direct {v2}, Lfreemarker/core/BugException;-><init>()V

    throw v2

    .line 96
    :cond_6
    :goto_3
    return-void
.end method


# virtual methods
.method public postProcess(Lfreemarker/template/Template;)V
    .locals 1
    .param p1, "t"    # Lfreemarker/template/Template;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/core/TemplatePostProcessorException;
        }
    .end annotation

    .line 48
    invoke-virtual {p1}, Lfreemarker/template/Template;->getRootTreeNode()Lfreemarker/core/TemplateElement;

    move-result-object v0

    .line 49
    .local v0, "te":Lfreemarker/core/TemplateElement;
    invoke-direct {p0, v0}, Lfreemarker/core/ThreadInterruptionSupportTemplatePostProcessor;->addInterruptionChecks(Lfreemarker/core/TemplateElement;)V

    .line 50
    return-void
.end method
