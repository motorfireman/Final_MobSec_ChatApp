.class Lfreemarker/core/ExistsExpression;
.super Lfreemarker/core/Expression;
.source "ExistsExpression.java"


# instance fields
.field protected final exp:Lfreemarker/core/Expression;


# direct methods
.method constructor <init>(Lfreemarker/core/Expression;)V
    .locals 0
    .param p1, "exp"    # Lfreemarker/core/Expression;

    .line 29
    invoke-direct {p0}, Lfreemarker/core/Expression;-><init>()V

    .line 30
    iput-object p1, p0, Lfreemarker/core/ExistsExpression;->exp:Lfreemarker/core/Expression;

    .line 31
    return-void
.end method


# virtual methods
.method _eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;
    .locals 3
    .param p1, "env"    # Lfreemarker/core/Environment;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;
        }
    .end annotation

    .line 35
    iget-object v0, p0, Lfreemarker/core/ExistsExpression;->exp:Lfreemarker/core/Expression;

    instance-of v1, v0, Lfreemarker/core/ParentheticalExpression;

    if-eqz v1, :cond_0

    .line 36
    const/4 v0, 0x1

    invoke-virtual {p1, v0}, Lfreemarker/core/Environment;->setFastInvalidReferenceExceptions(Z)Z

    move-result v0

    .line 38
    .local v0, "lastFIRE":Z
    const/4 v1, 0x0

    :try_start_0
    iget-object v2, p0, Lfreemarker/core/ExistsExpression;->exp:Lfreemarker/core/Expression;

    invoke-virtual {v2, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v1
    :try_end_0
    .catch Lfreemarker/core/InvalidReferenceException; {:try_start_0 .. :try_end_0} :catch_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .local v1, "tm":Lfreemarker/template/TemplateModel;
    goto :goto_0

    .line 42
    .end local v1    # "tm":Lfreemarker/template/TemplateModel;
    :catchall_0
    move-exception v2

    .restart local v1    # "tm":Lfreemarker/template/TemplateModel;
    invoke-virtual {p1, v0}, Lfreemarker/core/Environment;->setFastInvalidReferenceExceptions(Z)Z

    throw v2

    .line 39
    .end local v1    # "tm":Lfreemarker/template/TemplateModel;
    :catch_0
    move-exception v1

    .line 40
    .local v1, "ire":Lfreemarker/core/InvalidReferenceException;
    const/4 v1, 0x0

    .line 42
    .local v1, "tm":Lfreemarker/template/TemplateModel;
    :goto_0
    invoke-virtual {p1, v0}, Lfreemarker/core/Environment;->setFastInvalidReferenceExceptions(Z)Z

    .line 43
    nop

    .line 44
    .end local v0    # "lastFIRE":Z
    goto :goto_1

    .line 45
    .end local v1    # "tm":Lfreemarker/template/TemplateModel;
    :cond_0
    invoke-virtual {v0, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v1

    .line 47
    .restart local v1    # "tm":Lfreemarker/template/TemplateModel;
    :goto_1
    if-nez v1, :cond_1

    sget-object v0, Lfreemarker/template/TemplateBooleanModel;->FALSE:Lfreemarker/template/TemplateBooleanModel;

    goto :goto_2

    :cond_1
    sget-object v0, Lfreemarker/template/TemplateBooleanModel;->TRUE:Lfreemarker/template/TemplateBooleanModel;

    :goto_2
    return-object v0
.end method

.method protected deepCloneWithIdentifierReplaced_inner(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;
    .locals 2
    .param p1, "replacedIdentifier"    # Ljava/lang/String;
    .param p2, "replacement"    # Lfreemarker/core/Expression;
    .param p3, "replacementState"    # Lfreemarker/core/Expression$ReplacemenetState;

    .line 55
    new-instance v0, Lfreemarker/core/ExistsExpression;

    iget-object v1, p0, Lfreemarker/core/ExistsExpression;->exp:Lfreemarker/core/Expression;

    .line 56
    invoke-virtual {v1, p1, p2, p3}, Lfreemarker/core/Expression;->deepCloneWithIdentifierReplaced(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;

    move-result-object v1

    invoke-direct {v0, v1}, Lfreemarker/core/ExistsExpression;-><init>(Lfreemarker/core/Expression;)V

    return-object v0
.end method

.method public getCanonicalForm()Ljava/lang/String;
    .locals 2

    .line 60
    new-instance v0, Ljava/lang/StringBuffer;

    invoke-direct {v0}, Ljava/lang/StringBuffer;-><init>()V

    iget-object v1, p0, Lfreemarker/core/ExistsExpression;->exp:Lfreemarker/core/Expression;

    invoke-virtual {v1}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v0

    invoke-virtual {p0}, Lfreemarker/core/ExistsExpression;->getNodeTypeSymbol()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuffer;->toString()Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method getNodeTypeSymbol()Ljava/lang/String;
    .locals 1

    .line 64
    const-string v0, "??"

    return-object v0
.end method

.method getParameterCount()I
    .locals 1

    .line 68
    const/4 v0, 0x1

    return v0
.end method

.method getParameterRole(I)Lfreemarker/core/ParameterRole;
    .locals 1
    .param p1, "idx"    # I

    .line 76
    sget-object v0, Lfreemarker/core/ParameterRole;->LEFT_HAND_OPERAND:Lfreemarker/core/ParameterRole;

    return-object v0
.end method

.method getParameterValue(I)Ljava/lang/Object;
    .locals 1
    .param p1, "idx"    # I

    .line 72
    iget-object v0, p0, Lfreemarker/core/ExistsExpression;->exp:Lfreemarker/core/Expression;

    return-object v0
.end method

.method isLiteral()Z
    .locals 1

    .line 51
    const/4 v0, 0x0

    return v0
.end method
