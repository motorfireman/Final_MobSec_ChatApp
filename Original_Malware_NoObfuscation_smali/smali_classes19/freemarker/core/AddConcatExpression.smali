.class final Lfreemarker/core/AddConcatExpression;
.super Lfreemarker/core/Expression;
.source "AddConcatExpression.java"


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lfreemarker/core/AddConcatExpression$ConcatenatedHashEx;,
        Lfreemarker/core/AddConcatExpression$ConcatenatedHash;,
        Lfreemarker/core/AddConcatExpression$ConcatenatedSequence;
    }
.end annotation


# instance fields
.field private final left:Lfreemarker/core/Expression;

.field private final right:Lfreemarker/core/Expression;


# direct methods
.method constructor <init>(Lfreemarker/core/Expression;Lfreemarker/core/Expression;)V
    .locals 0
    .param p1, "left"    # Lfreemarker/core/Expression;
    .param p2, "right"    # Lfreemarker/core/Expression;

    .line 46
    invoke-direct {p0}, Lfreemarker/core/Expression;-><init>()V

    .line 47
    iput-object p1, p0, Lfreemarker/core/AddConcatExpression;->left:Lfreemarker/core/Expression;

    .line 48
    iput-object p2, p0, Lfreemarker/core/AddConcatExpression;->right:Lfreemarker/core/Expression;

    .line 49
    return-void
.end method

.method static _eval(Lfreemarker/core/Environment;Lfreemarker/core/TemplateObject;Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;)Lfreemarker/template/TemplateModel;
    .locals 4
    .param p0, "env"    # Lfreemarker/core/Environment;
    .param p1, "parent"    # Lfreemarker/core/TemplateObject;
    .param p2, "leftExp"    # Lfreemarker/core/Expression;
    .param p3, "leftModel"    # Lfreemarker/template/TemplateModel;
    .param p4, "rightExp"    # Lfreemarker/core/Expression;
    .param p5, "rightModel"    # Lfreemarker/template/TemplateModel;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateModelException;,
            Lfreemarker/template/TemplateException;,
            Lfreemarker/core/NonStringException;
        }
    .end annotation

    .line 66
    instance-of v0, p3, Lfreemarker/template/TemplateNumberModel;

    if-eqz v0, :cond_0

    instance-of v0, p5, Lfreemarker/template/TemplateNumberModel;

    if-eqz v0, :cond_0

    .line 68
    move-object v0, p3

    check-cast v0, Lfreemarker/template/TemplateNumberModel;

    invoke-static {v0, p2}, Lfreemarker/core/EvalUtil;->modelToNumber(Lfreemarker/template/TemplateNumberModel;Lfreemarker/core/Expression;)Ljava/lang/Number;

    move-result-object v0

    .line 69
    .local v0, "first":Ljava/lang/Number;
    move-object v1, p5

    check-cast v1, Lfreemarker/template/TemplateNumberModel;

    invoke-static {v1, p4}, Lfreemarker/core/EvalUtil;->modelToNumber(Lfreemarker/template/TemplateNumberModel;Lfreemarker/core/Expression;)Ljava/lang/Number;

    move-result-object v1

    .line 70
    .local v1, "second":Ljava/lang/Number;
    invoke-static {p0, p1, v0, v1}, Lfreemarker/core/AddConcatExpression;->_evalOnNumbers(Lfreemarker/core/Environment;Lfreemarker/core/TemplateObject;Ljava/lang/Number;Ljava/lang/Number;)Lfreemarker/template/TemplateModel;

    move-result-object v2

    return-object v2

    .line 72
    .end local v0    # "first":Ljava/lang/Number;
    .end local v1    # "second":Ljava/lang/Number;
    :cond_0
    instance-of v0, p3, Lfreemarker/template/TemplateSequenceModel;

    if-eqz v0, :cond_1

    instance-of v0, p5, Lfreemarker/template/TemplateSequenceModel;

    if-eqz v0, :cond_1

    .line 74
    new-instance v0, Lfreemarker/core/AddConcatExpression$ConcatenatedSequence;

    move-object v1, p3

    check-cast v1, Lfreemarker/template/TemplateSequenceModel;

    move-object v2, p5

    check-cast v2, Lfreemarker/template/TemplateSequenceModel;

    invoke-direct {v0, v1, v2}, Lfreemarker/core/AddConcatExpression$ConcatenatedSequence;-><init>(Lfreemarker/template/TemplateSequenceModel;Lfreemarker/template/TemplateSequenceModel;)V

    return-object v0

    .line 79
    :cond_1
    :try_start_0
    invoke-static {p3, p2, p0}, Lfreemarker/core/Expression;->coerceModelToString(Lfreemarker/template/TemplateModel;Lfreemarker/core/Expression;Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v0
    :try_end_0
    .catch Lfreemarker/core/NonStringException; {:try_start_0 .. :try_end_0} :catch_0

    .line 80
    .local v0, "s1":Ljava/lang/String;
    const-string v1, "null"

    if-nez v0, :cond_2

    move-object v0, v1

    .line 81
    :cond_2
    :try_start_1
    invoke-static {p5, p4, p0}, Lfreemarker/core/Expression;->coerceModelToString(Lfreemarker/template/TemplateModel;Lfreemarker/core/Expression;Lfreemarker/core/Environment;)Ljava/lang/String;

    move-result-object v2

    .line 82
    .local v2, "s2":Ljava/lang/String;
    if-nez v2, :cond_3

    move-object v2, v1

    .line 83
    :cond_3
    new-instance v1, Lfreemarker/template/SimpleScalar;

    invoke-virtual {v0, v2}, Ljava/lang/String;->concat(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v3

    invoke-direct {v1, v3}, Lfreemarker/template/SimpleScalar;-><init>(Ljava/lang/String;)V
    :try_end_1
    .catch Lfreemarker/core/NonStringException; {:try_start_1 .. :try_end_1} :catch_0

    return-object v1

    .line 84
    .end local v0    # "s1":Ljava/lang/String;
    .end local v2    # "s2":Ljava/lang/String;
    :catch_0
    move-exception v0

    .line 85
    .local v0, "e":Lfreemarker/core/NonStringException;
    instance-of v1, p3, Lfreemarker/template/TemplateHashModel;

    if-eqz v1, :cond_7

    instance-of v1, p5, Lfreemarker/template/TemplateHashModel;

    if-eqz v1, :cond_7

    .line 86
    instance-of v1, p3, Lfreemarker/template/TemplateHashModelEx;

    if-eqz v1, :cond_6

    instance-of v1, p5, Lfreemarker/template/TemplateHashModelEx;

    if-eqz v1, :cond_6

    .line 87
    move-object v1, p3

    check-cast v1, Lfreemarker/template/TemplateHashModelEx;

    .line 88
    .local v1, "leftModelEx":Lfreemarker/template/TemplateHashModelEx;
    move-object v2, p5

    check-cast v2, Lfreemarker/template/TemplateHashModelEx;

    .line 89
    .local v2, "rightModelEx":Lfreemarker/template/TemplateHashModelEx;
    invoke-interface {v1}, Lfreemarker/template/TemplateHashModelEx;->size()I

    move-result v3

    if-nez v3, :cond_4

    .line 90
    return-object v2

    .line 91
    :cond_4
    invoke-interface {v2}, Lfreemarker/template/TemplateHashModelEx;->size()I

    move-result v3

    if-nez v3, :cond_5

    .line 92
    return-object v1

    .line 94
    :cond_5
    new-instance v3, Lfreemarker/core/AddConcatExpression$ConcatenatedHashEx;

    invoke-direct {v3, v1, v2}, Lfreemarker/core/AddConcatExpression$ConcatenatedHashEx;-><init>(Lfreemarker/template/TemplateHashModelEx;Lfreemarker/template/TemplateHashModelEx;)V

    return-object v3

    .line 97
    .end local v1    # "leftModelEx":Lfreemarker/template/TemplateHashModelEx;
    .end local v2    # "rightModelEx":Lfreemarker/template/TemplateHashModelEx;
    :cond_6
    new-instance v1, Lfreemarker/core/AddConcatExpression$ConcatenatedHash;

    move-object v2, p3

    check-cast v2, Lfreemarker/template/TemplateHashModel;

    move-object v3, p5

    check-cast v3, Lfreemarker/template/TemplateHashModel;

    invoke-direct {v1, v2, v3}, Lfreemarker/core/AddConcatExpression$ConcatenatedHash;-><init>(Lfreemarker/template/TemplateHashModel;Lfreemarker/template/TemplateHashModel;)V

    return-object v1

    .line 101
    :cond_7
    throw v0
.end method

.method static _evalOnNumbers(Lfreemarker/core/Environment;Lfreemarker/core/TemplateObject;Ljava/lang/Number;Ljava/lang/Number;)Lfreemarker/template/TemplateModel;
    .locals 3
    .param p0, "env"    # Lfreemarker/core/Environment;
    .param p1, "parent"    # Lfreemarker/core/TemplateObject;
    .param p2, "first"    # Ljava/lang/Number;
    .param p3, "second"    # Ljava/lang/Number;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;
        }
    .end annotation

    .line 109
    if-eqz p0, :cond_0

    .line 111
    invoke-virtual {p0}, Lfreemarker/core/Environment;->getArithmeticEngine()Lfreemarker/core/ArithmeticEngine;

    move-result-object v0

    goto :goto_0

    .line 112
    :cond_0
    invoke-virtual {p1}, Lfreemarker/core/TemplateObject;->getTemplate()Lfreemarker/template/Template;

    move-result-object v0

    invoke-virtual {v0}, Lfreemarker/template/Template;->getArithmeticEngine()Lfreemarker/core/ArithmeticEngine;

    move-result-object v0

    :goto_0
    nop

    .line 113
    .local v0, "ae":Lfreemarker/core/ArithmeticEngine;
    new-instance v1, Lfreemarker/template/SimpleNumber;

    invoke-virtual {v0, p2, p3}, Lfreemarker/core/ArithmeticEngine;->add(Ljava/lang/Number;Ljava/lang/Number;)Ljava/lang/Number;

    move-result-object v2

    invoke-direct {v1, v2}, Lfreemarker/template/SimpleNumber;-><init>(Ljava/lang/Number;)V

    return-object v1
.end method


# virtual methods
.method _eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;
    .locals 6
    .param p1, "env"    # Lfreemarker/core/Environment;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Lfreemarker/template/TemplateException;
        }
    .end annotation

    .line 52
    iget-object v2, p0, Lfreemarker/core/AddConcatExpression;->left:Lfreemarker/core/Expression;

    invoke-virtual {v2, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v3

    iget-object v4, p0, Lfreemarker/core/AddConcatExpression;->right:Lfreemarker/core/Expression;

    invoke-virtual {v4, p1}, Lfreemarker/core/Expression;->eval(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;

    move-result-object v5

    move-object v0, p1

    move-object v1, p0

    invoke-static/range {v0 .. v5}, Lfreemarker/core/AddConcatExpression;->_eval(Lfreemarker/core/Environment;Lfreemarker/core/TemplateObject;Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;)Lfreemarker/template/TemplateModel;

    move-result-object v0

    return-object v0
.end method

.method protected deepCloneWithIdentifierReplaced_inner(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;
    .locals 3
    .param p1, "replacedIdentifier"    # Ljava/lang/String;
    .param p2, "replacement"    # Lfreemarker/core/Expression;
    .param p3, "replacementState"    # Lfreemarker/core/Expression$ReplacemenetState;

    .line 122
    new-instance v0, Lfreemarker/core/AddConcatExpression;

    iget-object v1, p0, Lfreemarker/core/AddConcatExpression;->left:Lfreemarker/core/Expression;

    .line 123
    invoke-virtual {v1, p1, p2, p3}, Lfreemarker/core/Expression;->deepCloneWithIdentifierReplaced(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;

    move-result-object v1

    iget-object v2, p0, Lfreemarker/core/AddConcatExpression;->right:Lfreemarker/core/Expression;

    .line 124
    invoke-virtual {v2, p1, p2, p3}, Lfreemarker/core/Expression;->deepCloneWithIdentifierReplaced(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;

    move-result-object v2

    invoke-direct {v0, v1, v2}, Lfreemarker/core/AddConcatExpression;-><init>(Lfreemarker/core/Expression;Lfreemarker/core/Expression;)V

    return-object v0
.end method

.method public getCanonicalForm()Ljava/lang/String;
    .locals 2

    .line 128
    new-instance v0, Ljava/lang/StringBuffer;

    invoke-direct {v0}, Ljava/lang/StringBuffer;-><init>()V

    iget-object v1, p0, Lfreemarker/core/AddConcatExpression;->left:Lfreemarker/core/Expression;

    invoke-virtual {v1}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v0

    const-string v1, " + "

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v0

    iget-object v1, p0, Lfreemarker/core/AddConcatExpression;->right:Lfreemarker/core/Expression;

    invoke-virtual {v1}, Lfreemarker/core/Expression;->getCanonicalForm()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuffer;->append(Ljava/lang/String;)Ljava/lang/StringBuffer;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuffer;->toString()Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method getNodeTypeSymbol()Ljava/lang/String;
    .locals 1

    .line 132
    const-string v0, "+"

    return-object v0
.end method

.method getParameterCount()I
    .locals 1

    .line 136
    const/4 v0, 0x2

    return v0
.end method

.method getParameterRole(I)Lfreemarker/core/ParameterRole;
    .locals 1
    .param p1, "idx"    # I

    .line 144
    invoke-static {p1}, Lfreemarker/core/ParameterRole;->forBinaryOperatorOperand(I)Lfreemarker/core/ParameterRole;

    move-result-object v0

    return-object v0
.end method

.method getParameterValue(I)Ljava/lang/Object;
    .locals 1
    .param p1, "idx"    # I

    .line 140
    if-nez p1, :cond_0

    iget-object v0, p0, Lfreemarker/core/AddConcatExpression;->left:Lfreemarker/core/Expression;

    goto :goto_0

    :cond_0
    iget-object v0, p0, Lfreemarker/core/AddConcatExpression;->right:Lfreemarker/core/Expression;

    :goto_0
    return-object v0
.end method

.method isLiteral()Z
    .locals 1

    .line 117
    iget-object v0, p0, Lfreemarker/core/AddConcatExpression;->constantValue:Lfreemarker/template/TemplateModel;

    if-nez v0, :cond_1

    iget-object v0, p0, Lfreemarker/core/AddConcatExpression;->left:Lfreemarker/core/Expression;

    invoke-virtual {v0}, Lfreemarker/core/Expression;->isLiteral()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lfreemarker/core/AddConcatExpression;->right:Lfreemarker/core/Expression;

    invoke-virtual {v0}, Lfreemarker/core/Expression;->isLiteral()Z

    move-result v0

    if-eqz v0, :cond_0

    goto :goto_0

    :cond_0
    const/4 v0, 0x0

    goto :goto_1

    :cond_1
    :goto_0
    const/4 v0, 0x1

    :goto_1
    return v0
.end method
