.class public Lfreemarker/cache/SoftCacheStorage;
.super Ljava/lang/Object;
.source "SoftCacheStorage.java"

# interfaces
.implements Lfreemarker/cache/ConcurrentCacheStorage;
.implements Lfreemarker/cache/CacheStorageWithGetSize;


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lfreemarker/cache/SoftCacheStorage$SoftValueReference;
    }
.end annotation


# static fields
.field private static final atomicRemove:Ljava/lang/reflect/Method;

.field static synthetic class$java$lang$Object:Ljava/lang/Class;


# instance fields
.field private final concurrent:Z

.field private final map:Ljava/util/Map;

.field private final queue:Ljava/lang/ref/ReferenceQueue;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    .line 42
    invoke-static {}, Lfreemarker/cache/SoftCacheStorage;->getAtomicRemoveMethod()Ljava/lang/reflect/Method;

    move-result-object v0

    sput-object v0, Lfreemarker/cache/SoftCacheStorage;->atomicRemove:Ljava/lang/reflect/Method;

    return-void
.end method

.method public constructor <init>()V
    .locals 1

    .line 49
    invoke-static {}, Lfreemarker/core/_ConcurrentMapFactory;->newMaybeConcurrentHashMap()Ljava/util/Map;

    move-result-object v0

    invoke-direct {p0, v0}, Lfreemarker/cache/SoftCacheStorage;-><init>(Ljava/util/Map;)V

    .line 50
    return-void
.end method

.method public constructor <init>(Ljava/util/Map;)V
    .locals 1
    .param p1, "backingMap"    # Ljava/util/Map;

    .line 56
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    .line 44
    new-instance v0, Ljava/lang/ref/ReferenceQueue;

    invoke-direct {v0}, Ljava/lang/ref/ReferenceQueue;-><init>()V

    iput-object v0, p0, Lfreemarker/cache/SoftCacheStorage;->queue:Ljava/lang/ref/ReferenceQueue;

    .line 57
    iput-object p1, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    .line 58
    invoke-static {p1}, Lfreemarker/core/_ConcurrentMapFactory;->isConcurrent(Ljava/util/Map;)Z

    move-result v0

    iput-boolean v0, p0, Lfreemarker/cache/SoftCacheStorage;->concurrent:Z

    .line 59
    return-void
.end method

.method static synthetic class$(Ljava/lang/String;)Ljava/lang/Class;
    .locals 2
    .param p0, "x0"    # Ljava/lang/String;

    .line 131
    :try_start_0
    invoke-static {p0}, Ljava/lang/Class;->forName(Ljava/lang/String;)Ljava/lang/Class;

    move-result-object v0
    :try_end_0
    .catch Ljava/lang/ClassNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    return-object v0

    :catch_0
    move-exception v0

    new-instance v1, Ljava/lang/NoClassDefFoundError;

    invoke-direct {v1}, Ljava/lang/NoClassDefFoundError;-><init>()V

    invoke-virtual {v1, v0}, Ljava/lang/NoClassDefFoundError;->initCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;

    move-result-object v0

    throw v0
.end method

.method private static getAtomicRemoveMethod()Ljava/lang/reflect/Method;
    .locals 6

    .line 131
    :try_start_0
    const-string v0, "java.util.concurrent.ConcurrentMap"

    invoke-static {v0}, Ljava/lang/Class;->forName(Ljava/lang/String;)Ljava/lang/Class;

    move-result-object v0

    const-string v1, "remove"

    const/4 v2, 0x2

    new-array v2, v2, [Ljava/lang/Class;

    const/4 v3, 0x0

    sget-object v4, Lfreemarker/cache/SoftCacheStorage;->class$java$lang$Object:Ljava/lang/Class;
    :try_end_0
    .catch Ljava/lang/ClassNotFoundException; {:try_start_0 .. :try_end_0} :catch_1
    .catch Ljava/lang/NoSuchMethodException; {:try_start_0 .. :try_end_0} :catch_0

    const-string v5, "java.lang.Object"

    if-nez v4, :cond_0

    :try_start_1
    invoke-static {v5}, Lfreemarker/cache/SoftCacheStorage;->class$(Ljava/lang/String;)Ljava/lang/Class;

    move-result-object v4

    sput-object v4, Lfreemarker/cache/SoftCacheStorage;->class$java$lang$Object:Ljava/lang/Class;

    :cond_0
    aput-object v4, v2, v3

    const/4 v3, 0x1

    sget-object v4, Lfreemarker/cache/SoftCacheStorage;->class$java$lang$Object:Ljava/lang/Class;

    if-nez v4, :cond_1

    invoke-static {v5}, Lfreemarker/cache/SoftCacheStorage;->class$(Ljava/lang/String;)Ljava/lang/Class;

    move-result-object v4

    sput-object v4, Lfreemarker/cache/SoftCacheStorage;->class$java$lang$Object:Ljava/lang/Class;

    :cond_1
    aput-object v4, v2, v3

    invoke-virtual {v0, v1, v2}, Ljava/lang/Class;->getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;

    move-result-object v0
    :try_end_1
    .catch Ljava/lang/ClassNotFoundException; {:try_start_1 .. :try_end_1} :catch_1
    .catch Ljava/lang/NoSuchMethodException; {:try_start_1 .. :try_end_1} :catch_0

    return-object v0

    .line 136
    :catch_0
    move-exception v0

    .line 137
    .local v0, "e":Ljava/lang/NoSuchMethodException;
    new-instance v1, Lfreemarker/template/utility/UndeclaredThrowableException;

    invoke-direct {v1, v0}, Lfreemarker/template/utility/UndeclaredThrowableException;-><init>(Ljava/lang/Throwable;)V

    throw v1

    .line 133
    .end local v0    # "e":Ljava/lang/NoSuchMethodException;
    :catch_1
    move-exception v0

    .line 134
    .local v0, "e":Ljava/lang/ClassNotFoundException;
    const/4 v1, 0x0

    return-object v1
.end method

.method private processQueue()V
    .locals 6

    .line 94
    :goto_0
    iget-object v0, p0, Lfreemarker/cache/SoftCacheStorage;->queue:Ljava/lang/ref/ReferenceQueue;

    invoke-virtual {v0}, Ljava/lang/ref/ReferenceQueue;->poll()Ljava/lang/ref/Reference;

    move-result-object v0

    check-cast v0, Lfreemarker/cache/SoftCacheStorage$SoftValueReference;

    .line 95
    .local v0, "ref":Lfreemarker/cache/SoftCacheStorage$SoftValueReference;
    if-nez v0, :cond_0

    .line 96
    return-void

    .line 98
    :cond_0
    invoke-virtual {v0}, Lfreemarker/cache/SoftCacheStorage$SoftValueReference;->getKey()Ljava/lang/Object;

    move-result-object v1

    .line 99
    .local v1, "key":Ljava/lang/Object;
    iget-boolean v2, p0, Lfreemarker/cache/SoftCacheStorage;->concurrent:Z

    if-eqz v2, :cond_1

    .line 101
    :try_start_0
    sget-object v2, Lfreemarker/cache/SoftCacheStorage;->atomicRemove:Ljava/lang/reflect/Method;

    iget-object v3, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    const/4 v4, 0x2

    new-array v4, v4, [Ljava/lang/Object;

    const/4 v5, 0x0

    aput-object v1, v4, v5

    const/4 v5, 0x1

    aput-object v0, v4, v5

    invoke-virtual {v2, v3, v4}, Ljava/lang/reflect/Method;->invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    :try_end_0
    .catch Ljava/lang/IllegalAccessException; {:try_start_0 .. :try_end_0} :catch_1
    .catch Ljava/lang/reflect/InvocationTargetException; {:try_start_0 .. :try_end_0} :catch_0

    .line 108
    goto :goto_1

    .line 106
    :catch_0
    move-exception v2

    .line 107
    .local v2, "e":Ljava/lang/reflect/InvocationTargetException;
    new-instance v3, Lfreemarker/template/utility/UndeclaredThrowableException;

    invoke-direct {v3, v2}, Lfreemarker/template/utility/UndeclaredThrowableException;-><init>(Ljava/lang/Throwable;)V

    throw v3

    .line 103
    .end local v2    # "e":Ljava/lang/reflect/InvocationTargetException;
    :catch_1
    move-exception v2

    .line 104
    .local v2, "e":Ljava/lang/IllegalAccessException;
    new-instance v3, Lfreemarker/template/utility/UndeclaredThrowableException;

    invoke-direct {v3, v2}, Lfreemarker/template/utility/UndeclaredThrowableException;-><init>(Ljava/lang/Throwable;)V

    throw v3

    .line 110
    .end local v2    # "e":Ljava/lang/IllegalAccessException;
    :cond_1
    iget-object v2, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    invoke-interface {v2, v1}, Ljava/util/Map;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v2

    if-ne v2, v0, :cond_2

    .line 111
    iget-object v2, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    invoke-interface {v2, v1}, Ljava/util/Map;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    .line 113
    .end local v0    # "ref":Lfreemarker/cache/SoftCacheStorage$SoftValueReference;
    .end local v1    # "key":Ljava/lang/Object;
    :cond_2
    :goto_1
    goto :goto_0
.end method


# virtual methods
.method public clear()V
    .locals 1

    .line 78
    iget-object v0, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    invoke-interface {v0}, Ljava/util/Map;->clear()V

    .line 79
    invoke-direct {p0}, Lfreemarker/cache/SoftCacheStorage;->processQueue()V

    .line 80
    return-void
.end method

.method public get(Ljava/lang/Object;)Ljava/lang/Object;
    .locals 2
    .param p1, "key"    # Ljava/lang/Object;

    .line 62
    invoke-direct {p0}, Lfreemarker/cache/SoftCacheStorage;->processQueue()V

    .line 63
    iget-object v0, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    invoke-interface {v0, p1}, Ljava/util/Map;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Ljava/lang/ref/Reference;

    .line 64
    .local v0, "ref":Ljava/lang/ref/Reference;
    if-nez v0, :cond_0

    const/4 v1, 0x0

    goto :goto_0

    :cond_0
    invoke-virtual {v0}, Ljava/lang/ref/Reference;->get()Ljava/lang/Object;

    move-result-object v1

    :goto_0
    return-object v1
.end method

.method public getSize()I
    .locals 1

    .line 88
    invoke-direct {p0}, Lfreemarker/cache/SoftCacheStorage;->processQueue()V

    .line 89
    iget-object v0, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    invoke-interface {v0}, Ljava/util/Map;->size()I

    move-result v0

    return v0
.end method

.method public isConcurrent()Z
    .locals 1

    .line 53
    iget-boolean v0, p0, Lfreemarker/cache/SoftCacheStorage;->concurrent:Z

    return v0
.end method

.method public put(Ljava/lang/Object;Ljava/lang/Object;)V
    .locals 3
    .param p1, "key"    # Ljava/lang/Object;
    .param p2, "value"    # Ljava/lang/Object;

    .line 68
    invoke-direct {p0}, Lfreemarker/cache/SoftCacheStorage;->processQueue()V

    .line 69
    iget-object v0, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    new-instance v1, Lfreemarker/cache/SoftCacheStorage$SoftValueReference;

    iget-object v2, p0, Lfreemarker/cache/SoftCacheStorage;->queue:Ljava/lang/ref/ReferenceQueue;

    invoke-direct {v1, p1, p2, v2}, Lfreemarker/cache/SoftCacheStorage$SoftValueReference;-><init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V

    invoke-interface {v0, p1, v1}, Ljava/util/Map;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 70
    return-void
.end method

.method public remove(Ljava/lang/Object;)V
    .locals 1
    .param p1, "key"    # Ljava/lang/Object;

    .line 73
    invoke-direct {p0}, Lfreemarker/cache/SoftCacheStorage;->processQueue()V

    .line 74
    iget-object v0, p0, Lfreemarker/cache/SoftCacheStorage;->map:Ljava/util/Map;

    invoke-interface {v0, p1}, Ljava/util/Map;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    .line 75
    return-void
.end method
